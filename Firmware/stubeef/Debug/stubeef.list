
stubeef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00007150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00007158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0000715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006160  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000010  08006170  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08006170  000082e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001639b  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002976  00000000  00000000  0001e3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00020d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5a  00000000  00000000  000220d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002742d  00000000  00000000  0002302a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e4d  00000000  00000000  0004a457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100697  00000000  00000000  000622a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016293b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f0  00000000  00000000  00162980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00167e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060f8 	.word	0x080060f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080060f8 	.word	0x080060f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 f8a2 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f8db 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fb35 	bl	80013c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d56:	f000 f963 	bl	8001020 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000d5a:	f000 f921 	bl	8000fa0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d5e:	f000 f9a9 	bl	80010b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d62:	f000 fa89 	bl	8001278 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d66:	f000 fa39 	bl	80011dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d6a:	f000 fadb 	bl	8001324 <MX_TIM5_Init>
//
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);

  	//pwm setup
	HAL_TIM_Base_Start(&htim1);
 8000d6e:	4852      	ldr	r0, [pc, #328]	@ (8000eb8 <main+0x174>)
 8000d70:	f002 fdba 	bl	80038e8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4850      	ldr	r0, [pc, #320]	@ (8000eb8 <main+0x174>)
 8000d78:	f002 fef6 	bl	8003b68 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb8 <main+0x174>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d84:	213c      	movs	r1, #60	@ 0x3c
 8000d86:	484d      	ldr	r0, [pc, #308]	@ (8000ebc <main+0x178>)
 8000d88:	f003 f8a6 	bl	8003ed8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8000d8c:	484c      	ldr	r0, [pc, #304]	@ (8000ec0 <main+0x17c>)
 8000d8e:	f002 fe1b 	bl	80039c8 <HAL_TIM_Base_Start_IT>
	upper = 0;
 8000d92:	494c      	ldr	r1, [pc, #304]	@ (8000ec4 <main+0x180>)
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c1 2300 	strd	r2, r3, [r1]

	PID.Kp =0.1;
 8000da0:	4b49      	ldr	r3, [pc, #292]	@ (8000ec8 <main+0x184>)
 8000da2:	4a4a      	ldr	r2, [pc, #296]	@ (8000ecc <main+0x188>)
 8000da4:	619a      	str	r2, [r3, #24]
	PID.Ki =0.0;
 8000da6:	4b48      	ldr	r3, [pc, #288]	@ (8000ec8 <main+0x184>)
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
	PID.Kd = 0.0;
 8000dae:	4b46      	ldr	r3, [pc, #280]	@ (8000ec8 <main+0x184>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&PID, 0);
 8000db6:	2100      	movs	r1, #0
 8000db8:	4843      	ldr	r0, [pc, #268]	@ (8000ec8 <main+0x184>)
 8000dba:	f005 f93b 	bl	8006034 <arm_pid_init_f32>

//	 Degree = QEIReadRaw*360/8192;
//	 Radian = QEIReadRaw*(2*3.14)/8192;
	 //Call every 0.1 s
	 static uint64_t timestamp =0;
	 int64_t currentTime = Micros();
 8000dbe:	f000 fbdd 	bl	800157c <Micros>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	e9c7 2300 	strd	r2, r3, [r7]
	 ReadLimit();
 8000dca:	f000 fd4b 	bl	8001864 <ReadLimit>
	 if(currentTime > timestamp)
 8000dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dd2:	493f      	ldr	r1, [pc, #252]	@ (8000ed0 <main+0x18c>)
 8000dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	eb71 0303 	sbcs.w	r3, r1, r3
 8000dde:	d238      	bcs.n	8000e52 <main+0x10e>
	 {
		 timestamp =currentTime + 10;//us
 8000de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000de4:	f112 040a 	adds.w	r4, r2, #10
 8000de8:	f143 0500 	adc.w	r5, r3, #0
 8000dec:	4622      	mov	r2, r4
 8000dee:	462b      	mov	r3, r5
 8000df0:	4937      	ldr	r1, [pc, #220]	@ (8000ed0 <main+0x18c>)
 8000df2:	e9c1 2300 	strd	r2, r3, [r1]
//		 QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
		 QEIEncoderPosVel_Update();
 8000df6:	f000 fbf3 	bl	80015e0 <QEIEncoderPosVel_Update>
//		 }
//		 if (diffPos < -100) {
//			 numOfRound += 1;
//		 }

		 realPos = QEIReadRaw + numOfRound * 200;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <main+0x190>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	23c8      	movs	r3, #200	@ 0xc8
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <main+0x194>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a33      	ldr	r2, [pc, #204]	@ (8000edc <main+0x198>)
 8000e10:	6013      	str	r3, [r2, #0]
		 velodegree = QEIdata.QEIAngularVelocity;
 8000e12:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <main+0x19c>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4a33      	ldr	r2, [pc, #204]	@ (8000ee4 <main+0x1a0>)
 8000e18:	6013      	str	r3, [r2, #0]
		 velodegree = (velodegree*60)/800;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <main+0x1a0>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000ee8 <main+0x1a4>
 8000e24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e28:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000eec <main+0x1a8>
 8000e2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <main+0x1a0>)
 8000e32:	edc3 7a00 	vstr	s15, [r3]
		 linearspeed = velodegree*14/60.0;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <main+0x1a0>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8000e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e44:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000ee8 <main+0x1a4>
 8000e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <main+0x1ac>)
 8000e4e:	edc3 7a00 	vstr	s15, [r3]
//		 if(velodegree > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);}
//		 else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);}


	 }
	 ReadLogicConv();
 8000e52:	f000 fc95 	bl	8001780 <ReadLogicConv>
	 if(mode == 1){
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <main+0x1b0>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <main+0x120>
		 ReadButton();
 8000e5e:	f000 fcc1 	bl	80017e4 <ReadButton>
 8000e62:	e005      	b.n	8000e70 <main+0x12c>
	 }else if (mode ==2){
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <main+0x1b0>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d101      	bne.n	8000e70 <main+0x12c>
		 MotorDrive();
 8000e6c:	f000 fd16 	bl	800189c <MotorDrive>
	 }
//	 ReadButton();
//	 MotorDrive(0);
		if(bt3==0){
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <main+0x1b4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10a      	bne.n	8000e8e <main+0x14a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	481f      	ldr	r0, [pc, #124]	@ (8000efc <main+0x1b8>)
 8000e7e:	f001 fb23 	bl	80024c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,duty_cycle);
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <main+0x1bc>)
 8000e84:	881a      	ldrh	r2, [r3, #0]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <main+0x174>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e8c:	e797      	b.n	8000dbe <main+0x7a>
		}else if(bt2==0){
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <main+0x1c0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <main+0x168>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2108      	movs	r1, #8
 8000e9a:	4818      	ldr	r0, [pc, #96]	@ (8000efc <main+0x1b8>)
 8000e9c:	f001 fb14 	bl	80024c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,duty_cycle);
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <main+0x1bc>)
 8000ea2:	881a      	ldrh	r2, [r3, #0]
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <main+0x174>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eaa:	e788      	b.n	8000dbe <main+0x7a>
		}else{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000eac:	4b02      	ldr	r3, [pc, #8]	@ (8000eb8 <main+0x174>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34
  {
 8000eb4:	e783      	b.n	8000dbe <main+0x7a>
 8000eb6:	bf00      	nop
 8000eb8:	20000114 	.word	0x20000114
 8000ebc:	200001ac 	.word	0x200001ac
 8000ec0:	200001f8 	.word	0x200001f8
 8000ec4:	20000248 	.word	0x20000248
 8000ec8:	200002a4 	.word	0x200002a4
 8000ecc:	3dcccccd 	.word	0x3dcccccd
 8000ed0:	200002d8 	.word	0x200002d8
 8000ed4:	20000254 	.word	0x20000254
 8000ed8:	2000025c 	.word	0x2000025c
 8000edc:	20000258 	.word	0x20000258
 8000ee0:	20000268 	.word	0x20000268
 8000ee4:	20000260 	.word	0x20000260
 8000ee8:	42700000 	.word	0x42700000
 8000eec:	44480000 	.word	0x44480000
 8000ef0:	20000250 	.word	0x20000250
 8000ef4:	20000002 	.word	0x20000002
 8000ef8:	2000029e 	.word	0x2000029e
 8000efc:	48000800 	.word	0x48000800
 8000f00:	20000000 	.word	0x20000000
 8000f04:	2000029d 	.word	0x2000029d

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	2238      	movs	r2, #56	@ 0x38
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 f8c2 	bl	80060a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 fc54 	bl	80027d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2340      	movs	r3, #64	@ 0x40
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f4a:	2355      	movs	r3, #85	@ 0x55
 8000f4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fcee 	bl	8002940 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f6a:	f000 fd39 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	230f      	movs	r3, #15
 8000f70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f72:	2303      	movs	r3, #3
 8000f74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2104      	movs	r1, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 ffec 	bl	8002f64 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f92:	f000 fd25 	bl	80019e0 <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	@ 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <MX_I2C1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <MX_I2C1_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fdc:	f001 fac9 	bl	8002572 <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f000 fcfb 	bl	80019e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	@ (8001014 <MX_I2C1_Init+0x74>)
 8000fee:	f001 fb5b 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 fcf2 	bl	80019e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_I2C1_Init+0x74>)
 8001000:	f001 fb9d 	bl	800273e <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 fce9 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000002c 	.word	0x2000002c
 8001018:	40005400 	.word	0x40005400
 800101c:	30a0a7fb 	.word	0x30a0a7fb

08001020 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001024:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001026:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <MX_LPUART1_UART_Init+0x90>)
 8001028:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001062:	4812      	ldr	r0, [pc, #72]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001064:	f004 f978 	bl	8005358 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 fcb7 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001076:	f004 ff13 	bl	8005ea0 <HAL_UARTEx_SetTxFifoThreshold>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001080:	f000 fcae 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	4809      	ldr	r0, [pc, #36]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001088:	f004 ff48 	bl	8005f1c <HAL_UARTEx_SetRxFifoThreshold>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001092:	f000 fca5 	bl	80019e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001098:	f004 fec9 	bl	8005e2e <HAL_UARTEx_DisableFifoMode>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010a2:	f000 fc9d 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000080 	.word	0x20000080
 80010b0:	40008000 	.word	0x40008000

080010b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b098      	sub	sp, #96	@ 0x60
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2234      	movs	r2, #52	@ 0x34
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 ffdd 	bl	80060a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <MX_TIM1_Init+0x120>)
 80010e8:	4a3b      	ldr	r2, [pc, #236]	@ (80011d8 <MX_TIM1_Init+0x124>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80010ec:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <MX_TIM1_Init+0x120>)
 80010ee:	22a9      	movs	r2, #169	@ 0xa9
 80010f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <MX_TIM1_Init+0x120>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 80010f8:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <MX_TIM1_Init+0x120>)
 80010fa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80010fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <MX_TIM1_Init+0x120>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <MX_TIM1_Init+0x120>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <MX_TIM1_Init+0x120>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001112:	4830      	ldr	r0, [pc, #192]	@ (80011d4 <MX_TIM1_Init+0x120>)
 8001114:	f002 fcd0 	bl	8003ab8 <HAL_TIM_PWM_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fc5f 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001132:	4619      	mov	r1, r3
 8001134:	4827      	ldr	r0, [pc, #156]	@ (80011d4 <MX_TIM1_Init+0x120>)
 8001136:	f003 ff9f 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001140:	f000 fc4e 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	@ 0x60
 8001146:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <MX_TIM1_Init+0x120>)
 800116a:	f003 f893 	bl	8004294 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001174:	f000 fc34 	bl	80019e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_TIM1_Init+0x120>)
 80011b6:	f003 fff5 	bl	80051a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80011c0:	f000 fc0e 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <MX_TIM1_Init+0x120>)
 80011c6:	f000 fda5 	bl	8001d14 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3760      	adds	r7, #96	@ 0x60
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000114 	.word	0x20000114
 80011d8:	40012c00 	.word	0x40012c00

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_TIM2_Init+0x98>)
 80011fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_TIM2_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_TIM2_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001222:	4814      	ldr	r0, [pc, #80]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001224:	f002 fb08 	bl	8003838 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800122e:	f000 fbd7 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_TIM2_Init+0x98>)
 8001240:	f003 f93c 	bl	80044bc <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800124a:	f000 fbc9 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <MX_TIM2_Init+0x98>)
 800125c:	f003 ff0c 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001266:	f000 fbbb 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000160 	.word	0x20000160

08001278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2224      	movs	r2, #36	@ 0x24
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 ff0a 	bl	80060a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <MX_TIM3_Init+0xa4>)
 8001298:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <MX_TIM3_Init+0xa8>)
 800129a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_TIM3_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <MX_TIM3_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <MX_TIM3_Init+0xa4>)
 80012aa:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 80012ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_TIM3_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_TIM3_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012bc:	2303      	movs	r3, #3
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012c4:	2301      	movs	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012d4:	2301      	movs	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	@ (800131c <MX_TIM3_Init+0xa4>)
 80012e8:	f002 fd50 	bl	8003d8c <HAL_TIM_Encoder_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012f2:	f000 fb75 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	@ (800131c <MX_TIM3_Init+0xa4>)
 8001304:	f003 feb8 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800130e:	f000 fb67 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3730      	adds	r7, #48	@ 0x30
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001ac 	.word	0x200001ac
 8001320:	40000400 	.word	0x40000400

08001324 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001344:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <MX_TIM5_Init+0x98>)
 8001346:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_TIM5_Init+0x94>)
 800134a:	22a9      	movs	r2, #169	@ 0xa9
 800134c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001356:	f04f 32ff 	mov.w	r2, #4294967295
 800135a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_TIM5_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <MX_TIM5_Init+0x94>)
 800136a:	f002 fa65 	bl	8003838 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 fb34 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_TIM5_Init+0x94>)
 8001386:	f003 f899 	bl	80044bc <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 fb26 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_TIM5_Init+0x94>)
 80013a2:	f003 fe69 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 fb18 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001f8 	.word	0x200001f8
 80013bc:	40000c00 	.word	0x40000c00

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b57      	ldr	r3, [pc, #348]	@ (8001534 <MX_GPIO_Init+0x174>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a56      	ldr	r2, [pc, #344]	@ (8001534 <MX_GPIO_Init+0x174>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b54      	ldr	r3, [pc, #336]	@ (8001534 <MX_GPIO_Init+0x174>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ee:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <MX_GPIO_Init+0x174>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a50      	ldr	r2, [pc, #320]	@ (8001534 <MX_GPIO_Init+0x174>)
 80013f4:	f043 0320 	orr.w	r3, r3, #32
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <MX_GPIO_Init+0x174>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <MX_GPIO_Init+0x174>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a4a      	ldr	r2, [pc, #296]	@ (8001534 <MX_GPIO_Init+0x174>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b48      	ldr	r3, [pc, #288]	@ (8001534 <MX_GPIO_Init+0x174>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b45      	ldr	r3, [pc, #276]	@ (8001534 <MX_GPIO_Init+0x174>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4a44      	ldr	r2, [pc, #272]	@ (8001534 <MX_GPIO_Init+0x174>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4b42      	ldr	r3, [pc, #264]	@ (8001534 <MX_GPIO_Init+0x174>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Relay1_Pin|DIROUT_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	210a      	movs	r1, #10
 800143a:	483f      	ldr	r0, [pc, #252]	@ (8001538 <MX_GPIO_Init+0x178>)
 800143c:	f001 f844 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2120      	movs	r1, #32
 8001444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001448:	f001 f83e 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay3_Pin|Relay4_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f240 2106 	movw	r1, #518	@ 0x206
 8001452:	483a      	ldr	r0, [pc, #232]	@ (800153c <MX_GPIO_Init+0x17c>)
 8001454:	f001 f838 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4832      	ldr	r0, [pc, #200]	@ (8001538 <MX_GPIO_Init+0x178>)
 8001470:	f000 fe90 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin DIROUT_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|DIROUT_Pin;
 8001474:	230a      	movs	r3, #10
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	482b      	ldr	r0, [pc, #172]	@ (8001538 <MX_GPIO_Init+0x178>)
 800148c:	f000 fe82 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon1_Pin LogicCon2_Pin LogicCon3_Pin BT3_Pin
                           BT4_Pin BT5_Pin */
  GPIO_InitStruct.Pin = LogicCon1_Pin|LogicCon2_Pin|LogicCon3_Pin|BT3_Pin
 8001490:	f240 7313 	movw	r3, #1811	@ 0x713
 8001494:	617b      	str	r3, [r7, #20]
                          |BT4_Pin|BT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f000 fe74 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ac:	2320      	movs	r3, #32
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f000 fe65 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon4_Pin LimitBottom_Pin */
  GPIO_InitStruct.Pin = LogicCon4_Pin|LimitBottom_Pin;
 80014ca:	2341      	movs	r3, #65	@ 0x41
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4817      	ldr	r0, [pc, #92]	@ (800153c <MX_GPIO_Init+0x17c>)
 80014de:	f000 fe59 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay2_Pin Relay3_Pin Relay4_Pin */
  GPIO_InitStruct.Pin = Relay2_Pin|Relay3_Pin|Relay4_Pin;
 80014e2:	f240 2306 	movw	r3, #518	@ 0x206
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4810      	ldr	r0, [pc, #64]	@ (800153c <MX_GPIO_Init+0x17c>)
 80014fc:	f000 fe4a 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LimitTop_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = LimitTop_Pin|BT1_Pin|BT2_Pin;
 8001500:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4808      	ldr	r0, [pc, #32]	@ (8001538 <MX_GPIO_Init+0x178>)
 8001516:	f000 fe3d 	bl	8002194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2028      	movs	r0, #40	@ 0x28
 8001520:	f000 fe03 	bl	800212a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001524:	2028      	movs	r0, #40	@ 0x28
 8001526:	f000 fe1a 	bl	800215e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48000800 	.word	0x48000800
 800153c:	48000400 	.word	0x48000400

08001540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10d      	bne.n	800156c <HAL_TIM_PeriodElapsedCallback+0x2c>
{
	upper+=1;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	1c54      	adds	r4, r2, #1
 8001558:	f143 0500 	adc.w	r5, r3, #0
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800155e:	e9c3 4500 	strd	r4, r5, [r3]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001562:	2120      	movs	r1, #32
 8001564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001568:	f000 ffc6 	bl	80024f8 <HAL_GPIO_TogglePin>
}
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bdb0      	pop	{r4, r5, r7, pc}
 8001574:	200001f8 	.word	0x200001f8
 8001578:	20000248 	.word	0x20000248

0800157c <Micros>:

uint64_t Micros(){
 800157c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <Micros+0x5c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	60fb      	str	r3, [r7, #12]
	time = (upper<<32)|lower;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <Micros+0x60>)
 800159e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	4643      	mov	r3, r8
 80015ac:	2200      	movs	r2, #0
 80015ae:	68fe      	ldr	r6, [r7, #12]
 80015b0:	f04f 0c00 	mov.w	ip, #0
 80015b4:	4630      	mov	r0, r6
 80015b6:	4661      	mov	r1, ip
 80015b8:	ea42 0400 	orr.w	r4, r2, r0
 80015bc:	ea43 0501 	orr.w	r5, r3, r1
 80015c0:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 80015c4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200001f8 	.word	0x200001f8
 80015dc:	20000248 	.word	0x20000248

080015e0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 80015e6:	f7ff ffc9 	bl	800157c <Micros>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	495e      	ldr	r1, [pc, #376]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80015f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80015f4:	4b5d      	ldr	r3, [pc, #372]	@ (800176c <QEIEncoderPosVel_Update+0x18c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80015fc:	6013      	str	r3, [r2, #0]
	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 80015fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b5b      	ldr	r3, [pc, #364]	@ (8001770 <QEIEncoderPosVel_Update+0x190>)
 8001604:	fba3 1302 	umull	r1, r3, r3, r2
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161c:	4b52      	ldr	r3, [pc, #328]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 800161e:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW]*360/800;
 8001622:	4b51      	ldr	r3, [pc, #324]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001624:	edd3 7a06 	vldr	s15, [r3, #24]
 8001628:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001774 <QEIEncoderPosVel_Update+0x194>
 800162c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001630:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001778 <QEIEncoderPosVel_Update+0x198>
 8001634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001638:	4b4b      	ldr	r3, [pc, #300]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 800163a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800163e:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b49      	ldr	r3, [pc, #292]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	60fb      	str	r3, [r7, #12]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW]-QEIdata.QEIPostion_1turn[OLD];
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 800164c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001650:	4b45      	ldr	r3, [pc, #276]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001652:	edd3 7a07 	vldr	s15, [r3, #28]
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165e:	ee17 3a90 	vmov	r3, s15
 8001662:	60bb      	str	r3, [r7, #8]
	//Handle Warp around
	if(diffPosition > 32400){
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f647 6290 	movw	r2, #32400	@ 0x7e90
 800166a:	4293      	cmp	r3, r2
 800166c:	dd04      	ble.n	8001678 <QEIEncoderPosVel_Update+0x98>
		diffPosition -= 64800;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 8001674:	3b20      	subs	r3, #32
 8001676:	60fb      	str	r3, [r7, #12]
		}
	if(diffPosition < -32400){
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a40      	ldr	r2, [pc, #256]	@ (800177c <QEIEncoderPosVel_Update+0x19c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	da04      	bge.n	800168a <QEIEncoderPosVel_Update+0xaa>
		diffPosition += 64800;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8001686:	3320      	adds	r3, #32
 8001688:	60fb      	str	r3, [r7, #12]
	}
	//Calculate Linear Position in mm unit
	if(diff1turn > 400){
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001690:	dd09      	ble.n	80016a6 <QEIEncoderPosVel_Update+0xc6>
			QEIdata.QEIRound -= 1;
 8001692:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001694:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800169c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016a0:	4b31      	ldr	r3, [pc, #196]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016a2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		}
	if(diff1turn < -400){
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 80016ac:	da09      	bge.n	80016c2 <QEIEncoderPosVel_Update+0xe2>
			QEIdata.QEIRound += 1;
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80016b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016be:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		}
	QEIdata.TotalPos = (QEIdata.QEIRound*14) + QEIdata.QEIPostion_1turn[NEW]*14/800; //linear pos in mm uint
 80016c2:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016c4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80016c8:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80016cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80016d6:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 80016da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016de:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8001778 <QEIEncoderPosVel_Update+0x198>
 80016e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016ec:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.00001;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 80016f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016fc:	1a84      	subs	r4, r0, r2
 80016fe:	eb61 0503 	sbc.w	r5, r1, r3
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe ff0d 	bl	8000524 <__aeabi_ul2d>
 800170a:	a315      	add	r3, pc, #84	@ (adr r3, 8001760 <QEIEncoderPosVel_Update+0x180>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff3e 	bl	8000590 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f94a 	bl	80009b4 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	607b      	str	r3, [r7, #4]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001738:	edc3 7a08 	vstr	s15, [r3, #32]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 800173c:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001742:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001746:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800174a:	4907      	ldr	r1, [pc, #28]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 800174c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <QEIEncoderPosVel_Update+0x188>)
 8001756:	61d3      	str	r3, [r2, #28]

}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bdb0      	pop	{r4, r5, r7, pc}
 8001760:	88e368f1 	.word	0x88e368f1
 8001764:	3ee4f8b5 	.word	0x3ee4f8b5
 8001768:	20000268 	.word	0x20000268
 800176c:	200001ac 	.word	0x200001ac
 8001770:	51eb851f 	.word	0x51eb851f
 8001774:	43b40000 	.word	0x43b40000
 8001778:	44480000 	.word	0x44480000
 800177c:	ffff8170 	.word	0xffff8170

08001780 <ReadLogicConv>:

void ReadLogicConv(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);//Lo1
 8001784:	2101      	movs	r1, #1
 8001786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178a:	f000 fe85 	bl	8002498 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <ReadLogicConv+0x50>)
 8001794:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);//Lo2
 8001796:	2102      	movs	r1, #2
 8001798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179c:	f000 fe7c 	bl	8002498 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <ReadLogicConv+0x54>)
 80017a6:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);//Lo3
 80017a8:	2110      	movs	r1, #16
 80017aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ae:	f000 fe73 	bl	8002498 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <ReadLogicConv+0x58>)
 80017b8:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);//Lo4
 80017ba:	2101      	movs	r1, #1
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <ReadLogicConv+0x5c>)
 80017be:	f000 fe6b 	bl	8002498 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <ReadLogicConv+0x60>)
 80017c8:	701a      	strb	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000298 	.word	0x20000298
 80017d4:	20000299 	.word	0x20000299
 80017d8:	2000029a 	.word	0x2000029a
 80017dc:	48000400 	.word	0x48000400
 80017e0:	2000029b 	.word	0x2000029b

080017e4 <ReadButton>:

void ReadButton(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);//BT1
 80017e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ec:	4817      	ldr	r0, [pc, #92]	@ (800184c <ReadButton+0x68>)
 80017ee:	f000 fe53 	bl	8002498 <HAL_GPIO_ReadPin>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <ReadButton+0x6c>)
 80017f8:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);//BT2
 80017fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017fe:	4813      	ldr	r0, [pc, #76]	@ (800184c <ReadButton+0x68>)
 8001800:	f000 fe4a 	bl	8002498 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <ReadButton+0x70>)
 800180a:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);//BT3
 800180c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001814:	f000 fe40 	bl	8002498 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <ReadButton+0x74>)
 800181e:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);//BT4
 8001820:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f000 fe36 	bl	8002498 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <ReadButton+0x78>)
 8001832:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);//BT5
 8001834:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f000 fe2c 	bl	8002498 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <ReadButton+0x7c>)
 8001846:	701a      	strb	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	48000800 	.word	0x48000800
 8001850:	2000029c 	.word	0x2000029c
 8001854:	2000029d 	.word	0x2000029d
 8001858:	2000029e 	.word	0x2000029e
 800185c:	2000029f 	.word	0x2000029f
 8001860:	200002a0 	.word	0x200002a0

08001864 <ReadLimit>:

void ReadLimit(){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);// LimitTop
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	4808      	ldr	r0, [pc, #32]	@ (800188c <ReadLimit+0x28>)
 800186c:	f000 fe14 	bl	8002498 <HAL_GPIO_ReadPin>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <ReadLimit+0x2c>)
 8001876:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);// LimitBottom
 8001878:	2140      	movs	r1, #64	@ 0x40
 800187a:	4806      	ldr	r0, [pc, #24]	@ (8001894 <ReadLimit+0x30>)
 800187c:	f000 fe0c 	bl	8002498 <HAL_GPIO_ReadPin>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <ReadLimit+0x34>)
 8001886:	701a      	strb	r2, [r3, #0]

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	48000800 	.word	0x48000800
 8001890:	200002a2 	.word	0x200002a2
 8001894:	48000400 	.word	0x48000400
 8001898:	200002a1 	.word	0x200002a1

0800189c <MotorDrive>:

void MotorDrive(){
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
	Vfeedback = arm_pid_f32(&PID, Goal - QEIdata.TotalPos);
 80018a2:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <MotorDrive+0x11c>)
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	4b44      	ldr	r3, [pc, #272]	@ (80019bc <MotorDrive+0x120>)
 80018aa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <MotorDrive+0x124>)
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80018d8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	edd3 6a02 	vldr	s13, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80018e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a2b      	ldr	r2, [pc, #172]	@ (80019c4 <MotorDrive+0x128>)
 8001916:	6013      	str	r3, [r2, #0]
	if(Vfeedback > 12){
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <MotorDrive+0x128>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	dd02      	ble.n	8001932 <MotorDrive+0x96>
		Vfeedback = 12;
 800192c:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <MotorDrive+0x128>)
 800192e:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <MotorDrive+0x12c>)
 8001930:	601a      	str	r2, [r3, #0]
	}
	if(Vfeedback < -12){
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <MotorDrive+0x128>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d502      	bpl.n	800194c <MotorDrive+0xb0>
		Vfeedback = -12;
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <MotorDrive+0x128>)
 8001948:	4a20      	ldr	r2, [pc, #128]	@ (80019cc <MotorDrive+0x130>)
 800194a:	601a      	str	r2, [r3, #0]
	}

	if(Vfeedback>0){
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MotorDrive+0x128>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	dd05      	ble.n	8001968 <MotorDrive+0xcc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 800195c:	2200      	movs	r2, #0
 800195e:	2108      	movs	r1, #8
 8001960:	481b      	ldr	r0, [pc, #108]	@ (80019d0 <MotorDrive+0x134>)
 8001962:	f000 fdb1 	bl	80024c8 <HAL_GPIO_WritePin>
 8001966:	e00c      	b.n	8001982 <MotorDrive+0xe6>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8001968:	2201      	movs	r2, #1
 800196a:	2108      	movs	r1, #8
 800196c:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <MotorDrive+0x134>)
 800196e:	f000 fdab 	bl	80024c8 <HAL_GPIO_WritePin>
			Vfeedback = Vfeedback*(-1);
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MotorDrive+0x128>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eef1 7a67 	vneg.f32	s15, s15
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MotorDrive+0x128>)
 800197e:	edc3 7a00 	vstr	s15, [r3]
		}
	duty_cycle_pid = Vfeedback*4000/12;
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <MotorDrive+0x128>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80019d4 <MotorDrive+0x138>
 800198c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001990:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <MotorDrive+0x13c>)
 80019a4:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,duty_cycle_pid);
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MotorDrive+0x13c>)
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <MotorDrive+0x140>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200002cc 	.word	0x200002cc
 80019bc:	20000268 	.word	0x20000268
 80019c0:	200002a4 	.word	0x200002a4
 80019c4:	200002c8 	.word	0x200002c8
 80019c8:	41400000 	.word	0x41400000
 80019cc:	c1400000 	.word	0xc1400000
 80019d0:	48000800 	.word	0x48000800
 80019d4:	457a0000 	.word	0x457a0000
 80019d8:	200002d0 	.word	0x200002d0
 80019dc:	20000114 	.word	0x20000114

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <Error_Handler+0x8>

080019ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_MspInit+0x44>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_MspInit+0x44>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a22:	f000 ff7d 	bl	8002920 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0a0      	sub	sp, #128	@ 0x80
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0318 	add.w	r3, r7, #24
 8001a50:	2254      	movs	r2, #84	@ 0x54
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 fb23 	bl	80060a0 <memset>
  if(hi2c->Instance==I2C1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b14 <HAL_I2C_MspInit+0xe0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d153      	bne.n	8001b0c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a64:	2340      	movs	r3, #64	@ 0x40
 8001a66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 fc93 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff ffb0 	bl	80019e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a24      	ldr	r2, [pc, #144]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001aca:	4619      	mov	r1, r3
 8001acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad0:	f000 fb60 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad8:	2312      	movs	r3, #18
 8001ada:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <HAL_I2C_MspInit+0xe8>)
 8001af0:	f000 fb50 	bl	8002194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001afa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_I2C_MspInit+0xe4>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3780      	adds	r7, #128	@ 0x80
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40005400 	.word	0x40005400
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48000400 	.word	0x48000400

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b09e      	sub	sp, #120	@ 0x78
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	2254      	movs	r2, #84	@ 0x54
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 faad 	bl	80060a0 <memset>
  if(huart->Instance==LPUART1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <HAL_UART_MspInit+0xa8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d136      	bne.n	8001bbe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b50:	2320      	movs	r3, #32
 8001b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fc1d 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b68:	f7ff ff3a 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <HAL_UART_MspInit+0xac>)
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	4a16      	ldr	r2, [pc, #88]	@ (8001bcc <HAL_UART_MspInit+0xac>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <HAL_UART_MspInit+0xac>)
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_MspInit+0xac>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	4a10      	ldr	r2, [pc, #64]	@ (8001bcc <HAL_UART_MspInit+0xac>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_UART_MspInit+0xac>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001bac:	230c      	movs	r3, #12
 8001bae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bba:	f000 faeb 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3778      	adds	r7, #120	@ 0x78
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40008000 	.word	0x40008000
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <HAL_TIM_PWM_MspInit+0x38>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10b      	bne.n	8001bfa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_TIM_PWM_MspInit+0x3c>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_TIM_PWM_MspInit+0x3c>)
 8001be8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c20:	d10c      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_TIM_Base_MspInit+0x68>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <HAL_TIM_Base_MspInit+0x68>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_TIM_Base_MspInit+0x68>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c3a:	e018      	b.n	8001c6e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0e      	ldr	r2, [pc, #56]	@ (8001c7c <HAL_TIM_Base_MspInit+0x6c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d113      	bne.n	8001c6e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_TIM_Base_MspInit+0x68>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <HAL_TIM_Base_MspInit+0x68>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_TIM_Base_MspInit+0x68>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2032      	movs	r0, #50	@ 0x32
 8001c64:	f000 fa61 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c68:	2032      	movs	r0, #50	@ 0x32
 8001c6a:	f000 fa78 	bl	800215e <HAL_NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40000c00 	.word	0x40000c00

08001c80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d130      	bne.n	8001d04 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x90>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x90>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	4a14      	ldr	r2, [pc, #80]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x90>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x90>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8001cd2:	23c0      	movs	r3, #192	@ 0xc0
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf0:	f000 fa50 	bl	8002194 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	201d      	movs	r0, #29
 8001cfa:	f000 fa16 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cfe:	201d      	movs	r0, #29
 8001d00:	f000 fa2d 	bl	800215e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_TIM_MspPostInit+0x64>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d11b      	bne.n	8001d6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <HAL_TIM_MspPostInit+0x68>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_TIM_MspPostInit+0x68>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_TIM_MspPostInit+0x68>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <HAL_TIM_MspPostInit+0x6c>)
 8001d6a:	f000 fa13 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000800 	.word	0x48000800

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <NMI_Handler+0x4>

08001d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <UsageFault_Handler+0x4>

08001dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dda:	f000 f8ad 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <TIM3_IRQHandler+0x10>)
 8001dea:	f002 f903 	bl	8003ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200001ac 	.word	0x200001ac

08001df8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001dfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e00:	f000 fb94 	bl	800252c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <TIM5_IRQHandler+0x10>)
 8001e0e:	f002 f8f1 	bl	8003ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200001f8 	.word	0x200001f8

08001e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <SystemInit+0x20>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <SystemInit+0x20>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e44:	f7ff ffea 	bl	8001e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4a:	490d      	ldr	r1, [pc, #52]	@ (8001e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <LoopForever+0xe>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e60:	4c0a      	ldr	r4, [pc, #40]	@ (8001e8c <LoopForever+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f004 f91f 	bl	80060b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e72:	f7fe ff67 	bl	8000d44 <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   r0, =_estack
 8001e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e84:	08006160 	.word	0x08006160
  ldr r2, =_sbss
 8001e88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e8c:	200002e4 	.word	0x200002e4

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f939 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff fd9a 	bl	80019ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed0:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_InitTick+0x68>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d022      	beq.n	8001f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_InitTick+0x6c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_InitTick+0x68>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f944 	bl	800217a <HAL_SYSTICK_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d809      	bhi.n	8001f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	f000 f910 	bl	800212a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_InitTick+0x70>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e007      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e004      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	20000004 	.word	0x20000004
 8001f34:	20000008 	.word	0x20000008

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a03      	ldr	r2, [pc, #12]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	200002e0 	.word	0x200002e0
 8001f58:	2000000c 	.word	0x2000000c

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200002e0 	.word	0x200002e0

08001f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4907      	ldr	r1, [pc, #28]	@ (8002010 <__NVIC_EnableIRQ+0x38>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	@ (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	@ (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	@ 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff8e 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff29 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff40 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff90 	bl	8002068 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5f 	bl	8002014 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff33 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffa4 	bl	80020d0 <SysTick_Config>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021a2:	e15a      	b.n	800245a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 814c 	beq.w	8002454 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d005      	beq.n	80021d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d130      	bne.n	8002236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220a:	2201      	movs	r2, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 0201 	and.w	r2, r3, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b03      	cmp	r3, #3
 8002240:	d017      	beq.n	8002272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d123      	bne.n	80022c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0203 	and.w	r2, r3, #3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80a6 	beq.w	8002454 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002308:	4b5b      	ldr	r3, [pc, #364]	@ (8002478 <HAL_GPIO_Init+0x2e4>)
 800230a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230c:	4a5a      	ldr	r2, [pc, #360]	@ (8002478 <HAL_GPIO_Init+0x2e4>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6613      	str	r3, [r2, #96]	@ 0x60
 8002314:	4b58      	ldr	r3, [pc, #352]	@ (8002478 <HAL_GPIO_Init+0x2e4>)
 8002316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002320:	4a56      	ldr	r2, [pc, #344]	@ (800247c <HAL_GPIO_Init+0x2e8>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800234a:	d01f      	beq.n	800238c <HAL_GPIO_Init+0x1f8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <HAL_GPIO_Init+0x2ec>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d019      	beq.n	8002388 <HAL_GPIO_Init+0x1f4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a4b      	ldr	r2, [pc, #300]	@ (8002484 <HAL_GPIO_Init+0x2f0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <HAL_GPIO_Init+0x1f0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4a      	ldr	r2, [pc, #296]	@ (8002488 <HAL_GPIO_Init+0x2f4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00d      	beq.n	8002380 <HAL_GPIO_Init+0x1ec>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x2f8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x1e8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_GPIO_Init+0x2fc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_GPIO_Init+0x1e4>
 8002374:	2305      	movs	r3, #5
 8002376:	e00a      	b.n	800238e <HAL_GPIO_Init+0x1fa>
 8002378:	2306      	movs	r3, #6
 800237a:	e008      	b.n	800238e <HAL_GPIO_Init+0x1fa>
 800237c:	2304      	movs	r3, #4
 800237e:	e006      	b.n	800238e <HAL_GPIO_Init+0x1fa>
 8002380:	2303      	movs	r3, #3
 8002382:	e004      	b.n	800238e <HAL_GPIO_Init+0x1fa>
 8002384:	2302      	movs	r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x1fa>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_GPIO_Init+0x1fa>
 800238c:	2300      	movs	r3, #0
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	4093      	lsls	r3, r2
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239e:	4937      	ldr	r1, [pc, #220]	@ (800247c <HAL_GPIO_Init+0x2e8>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ac:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_GPIO_Init+0x300>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d0:	4a30      	ldr	r2, [pc, #192]	@ (8002494 <HAL_GPIO_Init+0x300>)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002494 <HAL_GPIO_Init+0x300>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023fa:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <HAL_GPIO_Init+0x300>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002400:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_GPIO_Init+0x300>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002424:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <HAL_GPIO_Init+0x300>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <HAL_GPIO_Init+0x300>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800244e:	4a11      	ldr	r2, [pc, #68]	@ (8002494 <HAL_GPIO_Init+0x300>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	f47f ae9d 	bne.w	80021a4 <HAL_GPIO_Init+0x10>
  }
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	48000400 	.word	0x48000400
 8002484:	48000800 	.word	0x48000800
 8002488:	48000c00 	.word	0x48000c00
 800248c:	48001000 	.word	0x48001000
 8002490:	48001400 	.word	0x48001400
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e001      	b.n	80024ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43d9      	mvns	r1, r3
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	400b      	ands	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f806 	bl	800255c <HAL_GPIO_EXTI_Callback>
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e08d      	b.n	80026a0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff fa4b 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2224      	movs	r2, #36	@ 0x24
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	e006      	b.n	80025fa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d108      	bne.n	8002614 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e007      	b.n	8002624 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002622:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002636:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002646:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69d9      	ldr	r1, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d138      	bne.n	8002730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e032      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	@ 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d139      	bne.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275e:	2302      	movs	r3, #2
 8002760:	e033      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2224      	movs	r2, #36	@ 0x24
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d141      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f2:	d131      	bne.n	8002858 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f4:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fa:	4a46      	ldr	r2, [pc, #280]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002804:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800280c:	4a41      	ldr	r2, [pc, #260]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002814:	4b40      	ldr	r3, [pc, #256]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2232      	movs	r2, #50	@ 0x32
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a3f      	ldr	r2, [pc, #252]	@ (800291c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282a:	e002      	b.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3b01      	subs	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002832:	4b38      	ldr	r3, [pc, #224]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283e:	d102      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f2      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002846:	4b33      	ldr	r3, [pc, #204]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002852:	d158      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e057      	b.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002858:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800285e:	4a2d      	ldr	r2, [pc, #180]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002868:	e04d      	b.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002870:	d141      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002872:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287e:	d131      	bne.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002880:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002886:	4a23      	ldr	r2, [pc, #140]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002890:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002898:	4a1e      	ldr	r2, [pc, #120]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800289e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2232      	movs	r2, #50	@ 0x32
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	4a1c      	ldr	r2, [pc, #112]	@ (800291c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	0c9b      	lsrs	r3, r3, #18
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b6:	e002      	b.n	80028be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ca:	d102      	bne.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f2      	bne.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028de:	d112      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e011      	b.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028f4:	e007      	b.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002900:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002904:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40007000 	.word	0x40007000
 8002918:	20000004 	.word	0x20000004
 800291c:	431bde83 	.word	0x431bde83

08002920 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a04      	ldr	r2, [pc, #16]	@ (800293c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800292a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292e:	6093      	str	r3, [r2, #8]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40007000 	.word	0x40007000

08002940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e2fe      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295e:	4b97      	ldr	r3, [pc, #604]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002968:	4b94      	ldr	r3, [pc, #592]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b0c      	cmp	r3, #12
 8002976:	d102      	bne.n	800297e <HAL_RCC_OscConfig+0x3e>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d002      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b8d      	ldr	r3, [pc, #564]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e2d9      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a84      	ldr	r2, [pc, #528]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b7f      	ldr	r3, [pc, #508]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b7c      	ldr	r3, [pc, #496]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7b      	ldr	r2, [pc, #492]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b78      	ldr	r3, [pc, #480]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a77      	ldr	r2, [pc, #476]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b75      	ldr	r3, [pc, #468]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a74      	ldr	r2, [pc, #464]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7ff fab0 	bl	8001f5c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff faac 	bl	8001f5c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e29e      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	4b6a      	ldr	r3, [pc, #424]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff fa9c 	bl	8001f5c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fa98 	bl	8001f5c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e28a      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	4b60      	ldr	r3, [pc, #384]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a56:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a60:	4b56      	ldr	r3, [pc, #344]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_OscConfig+0x136>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_OscConfig+0x13c>
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d11f      	bne.n	8002abc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x154>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e25d      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b49      	ldr	r3, [pc, #292]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4946      	ldr	r1, [pc, #280]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002aa8:	4b45      	ldr	r3, [pc, #276]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa09 	bl	8001ec4 <HAL_InitTick>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d043      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e249      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d023      	beq.n	8002b0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fa44 	bl	8001f5c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7ff fa40 	bl	8001f5c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e232      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aea:	4b34      	ldr	r3, [pc, #208]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b31      	ldr	r3, [pc, #196]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	492d      	ldr	r1, [pc, #180]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
 8002b0a:	e01a      	b.n	8002b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff fa20 	bl	8001f5c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b20:	f7ff fa1c 	bl	8001f5c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e20e      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b32:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1e0>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d041      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5c:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7ff f9f9 	bl	8001f5c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7ff f9f5 	bl	8001f5c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1e7      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <HAL_RCC_OscConfig+0x22e>
 8002b8e:	e020      	b.n	8002bd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f9dc 	bl	8001f5c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba6:	e00d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff f9d8 	bl	8001f5c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d906      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1ca      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ea      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80a6 	beq.w	8002d2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002be4:	4b84      	ldr	r3, [pc, #528]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2b4>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2b6>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c06:	4b7c      	ldr	r3, [pc, #496]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c16:	4b79      	ldr	r3, [pc, #484]	@ (8002dfc <HAL_RCC_OscConfig+0x4bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c22:	4b76      	ldr	r3, [pc, #472]	@ (8002dfc <HAL_RCC_OscConfig+0x4bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a75      	ldr	r2, [pc, #468]	@ (8002dfc <HAL_RCC_OscConfig+0x4bc>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f995 	bl	8001f5c <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7ff f991 	bl	8001f5c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e183      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	4b6c      	ldr	r3, [pc, #432]	@ (8002dfc <HAL_RCC_OscConfig+0x4bc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_RCC_OscConfig+0x32e>
 8002c5c:	4b66      	ldr	r3, [pc, #408]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	4a65      	ldr	r2, [pc, #404]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6c:	e024      	b.n	8002cb8 <HAL_RCC_OscConfig+0x378>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d110      	bne.n	8002c98 <HAL_RCC_OscConfig+0x358>
 8002c76:	4b60      	ldr	r3, [pc, #384]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c86:	4b5c      	ldr	r3, [pc, #368]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c96:	e00f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x378>
 8002c98:	4b57      	ldr	r3, [pc, #348]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	4a56      	ldr	r2, [pc, #344]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cae:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d016      	beq.n	8002cee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7ff f94c 	bl	8001f5c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7ff f948 	bl	8001f5c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e138      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	4b46      	ldr	r3, [pc, #280]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ed      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x388>
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7ff f935 	bl	8001f5c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7ff f931 	bl	8001f5c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e121      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ed      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d03c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d40:	4b2d      	ldr	r3, [pc, #180]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d46:	4a2c      	ldr	r2, [pc, #176]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7ff f904 	bl	8001f5c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d58:	f7ff f900 	bl	8001f5c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0f2      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ef      	beq.n	8002d58 <HAL_RCC_OscConfig+0x418>
 8002d78:	e01b      	b.n	8002db2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d80:	4a1d      	ldr	r2, [pc, #116]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7ff f8e7 	bl	8001f5c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d92:	f7ff f8e3 	bl	8001f5c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0d5      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ef      	bne.n	8002d92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80c9 	beq.w	8002f4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	f000 8083 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d15e      	bne.n	8002e90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <HAL_RCC_OscConfig+0x4b8>)
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7ff f8bd 	bl	8001f5c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e00c      	b.n	8002e00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7ff f8b9 	bl	8001f5c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d905      	bls.n	8002e00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0ab      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e00:	4b55      	ldr	r3, [pc, #340]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ec      	bne.n	8002de6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	4b52      	ldr	r3, [pc, #328]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	4b52      	ldr	r3, [pc, #328]	@ (8002f5c <HAL_RCC_OscConfig+0x61c>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6a11      	ldr	r1, [r2, #32]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002e26:	0212      	lsls	r2, r2, #8
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e2e:	0852      	lsrs	r2, r2, #1
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0552      	lsls	r2, r2, #21
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e3a:	0852      	lsrs	r2, r2, #1
 8002e3c:	3a01      	subs	r2, #1
 8002e3e:	0652      	lsls	r2, r2, #25
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e46:	06d2      	lsls	r2, r2, #27
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	4943      	ldr	r1, [pc, #268]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b41      	ldr	r3, [pc, #260]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a40      	ldr	r2, [pc, #256]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a3d      	ldr	r2, [pc, #244]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff f878 	bl	8001f5c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff f874 	bl	8001f5c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e066      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x530>
 8002e8e:	e05e      	b.n	8002f4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b31      	ldr	r3, [pc, #196]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a30      	ldr	r2, [pc, #192]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f85e 	bl	8001f5c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7ff f85a 	bl	8001f5c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04c      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb6:	4b28      	ldr	r3, [pc, #160]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ec2:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	4924      	ldr	r1, [pc, #144]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002ec8:	4b25      	ldr	r3, [pc, #148]	@ (8002f60 <HAL_RCC_OscConfig+0x620>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	60cb      	str	r3, [r1, #12]
 8002ece:	e03e      	b.n	8002f4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e039      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <HAL_RCC_OscConfig+0x618>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0203 	and.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d12c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	3b01      	subs	r3, #1
 8002efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d123      	bne.n	8002f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11b      	bne.n	8002f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d113      	bne.n	8002f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	019f800c 	.word	0x019f800c
 8002f60:	feeefffc 	.word	0xfeeefffc

08002f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e11e      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b91      	ldr	r3, [pc, #580]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d910      	bls.n	8002fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b8e      	ldr	r3, [pc, #568]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	498c      	ldr	r1, [pc, #560]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b8a      	ldr	r3, [pc, #552]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e106      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d073      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d129      	bne.n	8003014 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc0:	4b81      	ldr	r3, [pc, #516]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0f4      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fd0:	f000 f99e 	bl	8003310 <RCC_GetSysClockFreqFromPLLSource>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4a7c      	ldr	r2, [pc, #496]	@ (80031cc <HAL_RCC_ClockConfig+0x268>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d93f      	bls.n	800305e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fde:	4b7a      	ldr	r3, [pc, #488]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d033      	beq.n	800305e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12f      	bne.n	800305e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ffe:	4b72      	ldr	r3, [pc, #456]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003006:	4a70      	ldr	r2, [pc, #448]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800300c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e024      	b.n	800305e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301c:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0c6      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302c:	4b66      	ldr	r3, [pc, #408]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0be      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800303c:	f000 f8ce 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003040:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4a61      	ldr	r2, [pc, #388]	@ (80031cc <HAL_RCC_ClockConfig+0x268>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d909      	bls.n	800305e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800304a:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003052:	4a5d      	ldr	r2, [pc, #372]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003058:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b5a      	ldr	r3, [pc, #360]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4957      	ldr	r1, [pc, #348]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe ff74 	bl	8001f5c <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe ff70 	bl	8001f5c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e095      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d023      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b43      	ldr	r3, [pc, #268]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a42      	ldr	r2, [pc, #264]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030d8:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4936      	ldr	r1, [pc, #216]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
 80030f2:	e008      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030fa:	4b33      	ldr	r3, [pc, #204]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4a32      	ldr	r2, [pc, #200]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003100:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003104:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003106:	4b2f      	ldr	r3, [pc, #188]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d21d      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003114:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 020f 	bic.w	r2, r3, #15
 800311c:	4929      	ldr	r1, [pc, #164]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003124:	f7fe ff1a 	bl	8001f5c <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe ff16 	bl	8001f5c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03b      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b20      	ldr	r3, [pc, #128]	@ (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d1ed      	bne.n	800312c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4917      	ldr	r1, [pc, #92]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490f      	ldr	r1, [pc, #60]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800318e:	f000 f825 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490c      	ldr	r1, [pc, #48]	@ (80031d0 <HAL_RCC_ClockConfig+0x26c>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	4a0a      	ldr	r2, [pc, #40]	@ (80031d4 <HAL_RCC_ClockConfig+0x270>)
 80031ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <HAL_RCC_ClockConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fe86 	bl	8001ec4 <HAL_InitTick>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	04c4b400 	.word	0x04c4b400
 80031d0:	08006110 	.word	0x08006110
 80031d4:	20000004 	.word	0x20000004
 80031d8:	20000008 	.word	0x20000008

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d102      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003298 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e047      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031f4:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e03e      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003206:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d136      	bne.n	8003280 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003212:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3301      	adds	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d10c      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003230:	4a1a      	ldr	r2, [pc, #104]	@ (800329c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	4a16      	ldr	r2, [pc, #88]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323a:	68d2      	ldr	r2, [r2, #12]
 800323c:	0a12      	lsrs	r2, r2, #8
 800323e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
      break;
 8003248:	e00c      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800324a:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	4a10      	ldr	r2, [pc, #64]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	0a12      	lsrs	r2, r2, #8
 8003258:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
      break;
 8003262:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0e5b      	lsrs	r3, r3, #25
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	e001      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003284:	693b      	ldr	r3, [r7, #16]
}
 8003286:	4618      	mov	r0, r3
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	00f42400 	.word	0x00f42400
 800329c:	016e3600 	.word	0x016e3600

080032a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b03      	ldr	r3, [pc, #12]	@ (80032b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032bc:	f7ff fff0 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08006120 	.word	0x08006120

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032e8:	f7ff ffda 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0adb      	lsrs	r3, r3, #11
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4904      	ldr	r1, [pc, #16]	@ (800330c <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	08006120 	.word	0x08006120

08003310 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003316:	4b1e      	ldr	r3, [pc, #120]	@ (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d10c      	bne.n	800334e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003334:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800333e:	68d2      	ldr	r2, [r2, #12]
 8003340:	0a12      	lsrs	r2, r2, #8
 8003342:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
    break;
 800334c:	e00c      	b.n	8003368 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4a0e      	ldr	r2, [pc, #56]	@ (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	0a12      	lsrs	r2, r2, #8
 800335c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
    break;
 8003366:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0e5b      	lsrs	r3, r3, #25
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003382:	687b      	ldr	r3, [r7, #4]
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40021000 	.word	0x40021000
 8003394:	016e3600 	.word	0x016e3600
 8003398:	00f42400 	.word	0x00f42400

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a8:	2300      	movs	r3, #0
 80033aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8098 	beq.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b43      	ldr	r3, [pc, #268]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	4a3f      	ldr	r2, [pc, #252]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d6:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	2301      	movs	r3, #1
 80033e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e6:	4b3a      	ldr	r3, [pc, #232]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a39      	ldr	r2, [pc, #228]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f2:	f7fe fdb3 	bl	8001f5c <HAL_GetTick>
 80033f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f8:	e009      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe fdaf 	bl	8001f5c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d902      	bls.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	74fb      	strb	r3, [r7, #19]
        break;
 800340c:	e005      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340e:	4b30      	ldr	r3, [pc, #192]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ef      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d159      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003420:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01e      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	d019      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800343c:	4b23      	ldr	r3, [pc, #140]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003448:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003458:	4b1c      	ldr	r3, [pc, #112]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345e:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003468:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe fd6f 	bl	8001f5c <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003480:	e00b      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fd6b 	bl	8001f5c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d902      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	74fb      	strb	r3, [r7, #19]
            break;
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349a:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ec      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ae:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034c4:	e008      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	74bb      	strb	r3, [r7, #18]
 80034ca:	e005      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d8:	7c7b      	ldrb	r3, [r7, #17]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4ba7      	ldr	r3, [pc, #668]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	4aa6      	ldr	r2, [pc, #664]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f6:	4ba1      	ldr	r3, [pc, #644]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fc:	f023 0203 	bic.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	499d      	ldr	r1, [pc, #628]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003518:	4b98      	ldr	r3, [pc, #608]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f023 020c 	bic.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4995      	ldr	r1, [pc, #596]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800353a:	4b90      	ldr	r3, [pc, #576]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	498c      	ldr	r1, [pc, #560]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800355c:	4b87      	ldr	r3, [pc, #540]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	4984      	ldr	r1, [pc, #528]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800357e:	4b7f      	ldr	r3, [pc, #508]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	497b      	ldr	r1, [pc, #492]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a0:	4b76      	ldr	r3, [pc, #472]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	4973      	ldr	r1, [pc, #460]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c2:	4b6e      	ldr	r3, [pc, #440]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	496a      	ldr	r1, [pc, #424]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e4:	4b65      	ldr	r3, [pc, #404]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4962      	ldr	r1, [pc, #392]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003606:	4b5d      	ldr	r3, [pc, #372]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	4959      	ldr	r1, [pc, #356]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003628:	4b54      	ldr	r3, [pc, #336]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	4951      	ldr	r1, [pc, #324]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364a:	4b4c      	ldr	r3, [pc, #304]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4948      	ldr	r1, [pc, #288]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366c:	4b43      	ldr	r3, [pc, #268]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	4940      	ldr	r1, [pc, #256]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368c:	4b3b      	ldr	r3, [pc, #236]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a3a      	ldr	r2, [pc, #232]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003696:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a4:	4b35      	ldr	r3, [pc, #212]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b2:	4932      	ldr	r1, [pc, #200]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b2d      	ldr	r3, [pc, #180]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036dc:	4b27      	ldr	r3, [pc, #156]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	4924      	ldr	r1, [pc, #144]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b1f      	ldr	r3, [pc, #124]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a1e      	ldr	r2, [pc, #120]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	4916      	ldr	r1, [pc, #88]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003732:	d105      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a10      	ldr	r2, [pc, #64]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d019      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	4908      	ldr	r1, [pc, #32]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800376a:	d109      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a02      	ldr	r2, [pc, #8]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003776:	60d3      	str	r3, [r2, #12]
 8003778:	e002      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d015      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800378c:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	4926      	ldr	r1, [pc, #152]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80037c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	4918      	ldr	r1, [pc, #96]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037e4:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d015      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380a:	490a      	ldr	r1, [pc, #40]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003826:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003828:	7cbb      	ldrb	r3, [r7, #18]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e049      	b.n	80038de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe f9d6 	bl	8001c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f000 ff5e 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e04c      	b.n	800399a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <HAL_TIM_Base_Start+0xc0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391a:	d01d      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a22      	ldr	r2, [pc, #136]	@ (80039ac <HAL_TIM_Base_Start+0xc4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a21      	ldr	r2, [pc, #132]	@ (80039b0 <HAL_TIM_Base_Start+0xc8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1f      	ldr	r2, [pc, #124]	@ (80039b4 <HAL_TIM_Base_Start+0xcc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1e      	ldr	r2, [pc, #120]	@ (80039b8 <HAL_TIM_Base_Start+0xd0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1c      	ldr	r2, [pc, #112]	@ (80039bc <HAL_TIM_Base_Start+0xd4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_TIM_Base_Start+0x70>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1b      	ldr	r2, [pc, #108]	@ (80039c0 <HAL_TIM_Base_Start+0xd8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d115      	bne.n	8003984 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	4b19      	ldr	r3, [pc, #100]	@ (80039c4 <HAL_TIM_Base_Start+0xdc>)
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b06      	cmp	r3, #6
 8003968:	d015      	beq.n	8003996 <HAL_TIM_Base_Start+0xae>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d011      	beq.n	8003996 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	e008      	b.n	8003996 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e000      	b.n	8003998 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40013400 	.word	0x40013400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40015000 	.word	0x40015000
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e054      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a26      	ldr	r2, [pc, #152]	@ (8003a98 <HAL_TIM_Base_Start_IT+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0a:	d01d      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a22      	ldr	r2, [pc, #136]	@ (8003a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a21      	ldr	r2, [pc, #132]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_TIM_Base_Start_IT+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x80>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d115      	bne.n	8003a74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xec>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d015      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0xbe>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a60:	d011      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a72:	e008      	b.n	8003a86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e000      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40015000 	.word	0x40015000
 8003ab4:	00010007 	.word	0x00010007

08003ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e049      	b.n	8003b5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe f876 	bl	8001bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f000 fe1e 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <HAL_TIM_PWM_Start+0x24>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e03c      	b.n	8003c06 <HAL_TIM_PWM_Start+0x9e>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d109      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0x3e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e02f      	b.n	8003c06 <HAL_TIM_PWM_Start+0x9e>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d109      	bne.n	8003bc0 <HAL_TIM_PWM_Start+0x58>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e022      	b.n	8003c06 <HAL_TIM_PWM_Start+0x9e>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d109      	bne.n	8003bda <HAL_TIM_PWM_Start+0x72>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	e015      	b.n	8003c06 <HAL_TIM_PWM_Start+0x9e>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x8c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e008      	b.n	8003c06 <HAL_TIM_PWM_Start+0x9e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0a6      	b.n	8003d5c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xb6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c1c:	e023      	b.n	8003c66 <HAL_TIM_PWM_Start+0xfe>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d104      	bne.n	8003c2e <HAL_TIM_PWM_Start+0xc6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c2c:	e01b      	b.n	8003c66 <HAL_TIM_PWM_Start+0xfe>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_PWM_Start+0xd6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c3c:	e013      	b.n	8003c66 <HAL_TIM_PWM_Start+0xfe>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Start+0xe6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c4c:	e00b      	b.n	8003c66 <HAL_TIM_PWM_Start+0xfe>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Start+0xf6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c5c:	e003      	b.n	8003c66 <HAL_TIM_PWM_Start+0xfe>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f9dc 	bl	800502c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3a      	ldr	r2, [pc, #232]	@ (8003d64 <HAL_TIM_PWM_Start+0x1fc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x148>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a39      	ldr	r2, [pc, #228]	@ (8003d68 <HAL_TIM_PWM_Start+0x200>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x148>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a37      	ldr	r2, [pc, #220]	@ (8003d6c <HAL_TIM_PWM_Start+0x204>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x148>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a36      	ldr	r2, [pc, #216]	@ (8003d70 <HAL_TIM_PWM_Start+0x208>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x148>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a34      	ldr	r2, [pc, #208]	@ (8003d74 <HAL_TIM_PWM_Start+0x20c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x148>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a33      	ldr	r2, [pc, #204]	@ (8003d78 <HAL_TIM_PWM_Start+0x210>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIM_PWM_Start+0x14c>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x14e>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a25      	ldr	r2, [pc, #148]	@ (8003d64 <HAL_TIM_PWM_Start+0x1fc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cdc:	d01d      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <HAL_TIM_PWM_Start+0x214>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a24      	ldr	r2, [pc, #144]	@ (8003d80 <HAL_TIM_PWM_Start+0x218>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a23      	ldr	r2, [pc, #140]	@ (8003d84 <HAL_TIM_PWM_Start+0x21c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <HAL_TIM_PWM_Start+0x200>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_TIM_PWM_Start+0x204>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x1b2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	@ (8003d78 <HAL_TIM_PWM_Start+0x210>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d115      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <HAL_TIM_PWM_Start+0x220>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d015      	beq.n	8003d58 <HAL_TIM_PWM_Start+0x1f0>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d32:	d011      	beq.n	8003d58 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	e008      	b.n	8003d58 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e000      	b.n	8003d5a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800
 8003d78:	40015000 	.word	0x40015000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	00010007 	.word	0x00010007

08003d8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e097      	b.n	8003ed0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d106      	bne.n	8003dba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fd ff63 	bl	8001c80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003dd0:	f023 0307 	bic.w	r3, r3, #7
 8003dd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f000 fca9 	bl	8004738 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e2c:	f023 030c 	bic.w	r3, r3, #12
 8003e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	011a      	lsls	r2, r3, #4
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	031b      	lsls	r3, r3, #12
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ee8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ef0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ef8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d110      	bne.n	8003f2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f0e:	7b7b      	ldrb	r3, [r7, #13]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e069      	b.n	8003fec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f28:	e031      	b.n	8003f8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d110      	bne.n	8003f52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f30:	7bbb      	ldrb	r3, [r7, #14]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f36:	7b3b      	ldrb	r3, [r7, #12]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d001      	beq.n	8003f40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e055      	b.n	8003fec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f50:	e01d      	b.n	8003f8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d108      	bne.n	8003f6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f5e:	7b7b      	ldrb	r3, [r7, #13]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f64:	7b3b      	ldrb	r3, [r7, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d001      	beq.n	8003f6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e03e      	b.n	8003fec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_Encoder_Start+0xc4>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d008      	beq.n	8003fac <HAL_TIM_Encoder_Start+0xd4>
 8003f9a:	e00f      	b.n	8003fbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 f841 	bl	800502c <TIM_CCxChannelCmd>
      break;
 8003faa:	e016      	b.n	8003fda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f839 	bl	800502c <TIM_CCxChannelCmd>
      break;
 8003fba:	e00e      	b.n	8003fda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f831 	bl	800502c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f82a 	bl	800502c <TIM_CCxChannelCmd>
      break;
 8003fd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d020      	beq.n	8004058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01b      	beq.n	8004058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0202 	mvn.w	r2, #2
 8004028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fb5c 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fb4e 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fb5f 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d020      	beq.n	80040a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01b      	beq.n	80040a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0204 	mvn.w	r2, #4
 8004074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fb36 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 8004090:	e005      	b.n	800409e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fb28 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fb39 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d020      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0208 	mvn.w	r2, #8
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2204      	movs	r2, #4
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb10 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fb02 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb13 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0210 	mvn.w	r2, #16
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2208      	movs	r2, #8
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 faea 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fadc 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 faed 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0201 	mvn.w	r2, #1
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd f9f0 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00c      	beq.n	800418e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f001 f8a9 	bl	80052e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80041aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f001 f8a1 	bl	80052f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00c      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 faa7 	bl	8004724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00c      	beq.n	80041fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0220 	mvn.w	r2, #32
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f001 f869 	bl	80052cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 f875 	bl	8005308 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f001 f86d 	bl	800531c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f001 f865 	bl	8005330 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 f85d 	bl	8005344 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0ff      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b14      	cmp	r3, #20
 80042be:	f200 80f0 	bhi.w	80044a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042c2:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	080044a3 	.word	0x080044a3
 80042d0:	080044a3 	.word	0x080044a3
 80042d4:	080044a3 	.word	0x080044a3
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	080044a3 	.word	0x080044a3
 80042e0:	080044a3 	.word	0x080044a3
 80042e4:	080044a3 	.word	0x080044a3
 80042e8:	0800439f 	.word	0x0800439f
 80042ec:	080044a3 	.word	0x080044a3
 80042f0:	080044a3 	.word	0x080044a3
 80042f4:	080044a3 	.word	0x080044a3
 80042f8:	080043df 	.word	0x080043df
 80042fc:	080044a3 	.word	0x080044a3
 8004300:	080044a3 	.word	0x080044a3
 8004304:	080044a3 	.word	0x080044a3
 8004308:	08004421 	.word	0x08004421
 800430c:	080044a3 	.word	0x080044a3
 8004310:	080044a3 	.word	0x080044a3
 8004314:	080044a3 	.word	0x080044a3
 8004318:	08004461 	.word	0x08004461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fabc 	bl	80048a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0208 	orr.w	r2, r2, #8
 8004336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0204 	bic.w	r2, r2, #4
 8004346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6999      	ldr	r1, [r3, #24]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	619a      	str	r2, [r3, #24]
      break;
 800435a:	e0a5      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fb36 	bl	80049d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6999      	ldr	r1, [r3, #24]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	021a      	lsls	r2, r3, #8
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	619a      	str	r2, [r3, #24]
      break;
 800439c:	e084      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fba9 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0208 	orr.w	r2, r2, #8
 80043b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0204 	bic.w	r2, r2, #4
 80043c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69d9      	ldr	r1, [r3, #28]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	61da      	str	r2, [r3, #28]
      break;
 80043dc:	e064      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fc1b 	bl	8004c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69d9      	ldr	r1, [r3, #28]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	021a      	lsls	r2, r3, #8
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	61da      	str	r2, [r3, #28]
      break;
 800441e:	e043      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fc8e 	bl	8004d48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800445e:	e023      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fcd8 	bl	8004e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800447a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80044a0:	e002      	b.n	80044a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
      break;
 80044a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop

080044bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIM_ConfigClockSource+0x1c>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e0f6      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x20a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80044f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6f      	ldr	r2, [pc, #444]	@ (80046d0 <HAL_TIM_ConfigClockSource+0x214>)
 8004512:	4293      	cmp	r3, r2
 8004514:	f000 80c1 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004518:	4a6d      	ldr	r2, [pc, #436]	@ (80046d0 <HAL_TIM_ConfigClockSource+0x214>)
 800451a:	4293      	cmp	r3, r2
 800451c:	f200 80c6 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004520:	4a6c      	ldr	r2, [pc, #432]	@ (80046d4 <HAL_TIM_ConfigClockSource+0x218>)
 8004522:	4293      	cmp	r3, r2
 8004524:	f000 80b9 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004528:	4a6a      	ldr	r2, [pc, #424]	@ (80046d4 <HAL_TIM_ConfigClockSource+0x218>)
 800452a:	4293      	cmp	r3, r2
 800452c:	f200 80be 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004530:	4a69      	ldr	r2, [pc, #420]	@ (80046d8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f000 80b1 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004538:	4a67      	ldr	r2, [pc, #412]	@ (80046d8 <HAL_TIM_ConfigClockSource+0x21c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f200 80b6 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004540:	4a66      	ldr	r2, [pc, #408]	@ (80046dc <HAL_TIM_ConfigClockSource+0x220>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f000 80a9 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004548:	4a64      	ldr	r2, [pc, #400]	@ (80046dc <HAL_TIM_ConfigClockSource+0x220>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f200 80ae 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004550:	4a63      	ldr	r2, [pc, #396]	@ (80046e0 <HAL_TIM_ConfigClockSource+0x224>)
 8004552:	4293      	cmp	r3, r2
 8004554:	f000 80a1 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004558:	4a61      	ldr	r2, [pc, #388]	@ (80046e0 <HAL_TIM_ConfigClockSource+0x224>)
 800455a:	4293      	cmp	r3, r2
 800455c:	f200 80a6 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004560:	4a60      	ldr	r2, [pc, #384]	@ (80046e4 <HAL_TIM_ConfigClockSource+0x228>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f000 8099 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004568:	4a5e      	ldr	r2, [pc, #376]	@ (80046e4 <HAL_TIM_ConfigClockSource+0x228>)
 800456a:	4293      	cmp	r3, r2
 800456c:	f200 809e 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004570:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004574:	f000 8091 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004578:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800457c:	f200 8096 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004584:	f000 8089 	beq.w	800469a <HAL_TIM_ConfigClockSource+0x1de>
 8004588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458c:	f200 808e 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004594:	d03e      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x158>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459a:	f200 8087 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a2:	f000 8086 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x1f6>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045aa:	d87f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045ac:	2b70      	cmp	r3, #112	@ 0x70
 80045ae:	d01a      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x12a>
 80045b0:	2b70      	cmp	r3, #112	@ 0x70
 80045b2:	d87b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045b4:	2b60      	cmp	r3, #96	@ 0x60
 80045b6:	d050      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x19e>
 80045b8:	2b60      	cmp	r3, #96	@ 0x60
 80045ba:	d877      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045bc:	2b50      	cmp	r3, #80	@ 0x50
 80045be:	d03c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x17e>
 80045c0:	2b50      	cmp	r3, #80	@ 0x50
 80045c2:	d873      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045c4:	2b40      	cmp	r3, #64	@ 0x40
 80045c6:	d058      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x1be>
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d86f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045cc:	2b30      	cmp	r3, #48	@ 0x30
 80045ce:	d064      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x1de>
 80045d0:	2b30      	cmp	r3, #48	@ 0x30
 80045d2:	d86b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d060      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x1de>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d867      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x1de>
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d05a      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x1de>
 80045e4:	e062      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f6:	f000 fcf9 	bl	8004fec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	609a      	str	r2, [r3, #8]
      break;
 8004612:	e04f      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	f000 fce2 	bl	8004fec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004636:	609a      	str	r2, [r3, #8]
      break;
 8004638:	e03c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fc54 	bl	8004ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2150      	movs	r1, #80	@ 0x50
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fcad 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004658:	e02c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fc73 	bl	8004f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2160      	movs	r1, #96	@ 0x60
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fc9d 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004678:	e01c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	461a      	mov	r2, r3
 8004688:	f000 fc34 	bl	8004ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2140      	movs	r1, #64	@ 0x40
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fc8d 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fc84 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80046b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	00100070 	.word	0x00100070
 80046d4:	00100060 	.word	0x00100060
 80046d8:	00100050 	.word	0x00100050
 80046dc:	00100040 	.word	0x00100040
 80046e0:	00100030 	.word	0x00100030
 80046e4:	00100020 	.word	0x00100020

080046e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a4c      	ldr	r2, [pc, #304]	@ (800487c <TIM_Base_SetConfig+0x144>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d017      	beq.n	8004780 <TIM_Base_SetConfig+0x48>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004756:	d013      	beq.n	8004780 <TIM_Base_SetConfig+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a49      	ldr	r2, [pc, #292]	@ (8004880 <TIM_Base_SetConfig+0x148>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00f      	beq.n	8004780 <TIM_Base_SetConfig+0x48>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a48      	ldr	r2, [pc, #288]	@ (8004884 <TIM_Base_SetConfig+0x14c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x48>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a47      	ldr	r2, [pc, #284]	@ (8004888 <TIM_Base_SetConfig+0x150>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x48>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a46      	ldr	r2, [pc, #280]	@ (800488c <TIM_Base_SetConfig+0x154>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x48>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a45      	ldr	r2, [pc, #276]	@ (8004890 <TIM_Base_SetConfig+0x158>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a39      	ldr	r2, [pc, #228]	@ (800487c <TIM_Base_SetConfig+0x144>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d023      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a0:	d01f      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a36      	ldr	r2, [pc, #216]	@ (8004880 <TIM_Base_SetConfig+0x148>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01b      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a35      	ldr	r2, [pc, #212]	@ (8004884 <TIM_Base_SetConfig+0x14c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d017      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a34      	ldr	r2, [pc, #208]	@ (8004888 <TIM_Base_SetConfig+0x150>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a33      	ldr	r2, [pc, #204]	@ (800488c <TIM_Base_SetConfig+0x154>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00f      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a33      	ldr	r2, [pc, #204]	@ (8004894 <TIM_Base_SetConfig+0x15c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a32      	ldr	r2, [pc, #200]	@ (8004898 <TIM_Base_SetConfig+0x160>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a31      	ldr	r2, [pc, #196]	@ (800489c <TIM_Base_SetConfig+0x164>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_Base_SetConfig+0xaa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004890 <TIM_Base_SetConfig+0x158>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a18      	ldr	r2, [pc, #96]	@ (800487c <TIM_Base_SetConfig+0x144>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <TIM_Base_SetConfig+0x110>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <TIM_Base_SetConfig+0x154>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x110>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1a      	ldr	r2, [pc, #104]	@ (8004894 <TIM_Base_SetConfig+0x15c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x110>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a19      	ldr	r2, [pc, #100]	@ (8004898 <TIM_Base_SetConfig+0x160>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x110>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a18      	ldr	r2, [pc, #96]	@ (800489c <TIM_Base_SetConfig+0x164>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x110>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a13      	ldr	r2, [pc, #76]	@ (8004890 <TIM_Base_SetConfig+0x158>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d103      	bne.n	8004850 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d105      	bne.n	800486e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	611a      	str	r2, [r3, #16]
  }
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40013400 	.word	0x40013400
 8004890:	40015000 	.word	0x40015000
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800

080048a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0201 	bic.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0302 	bic.w	r3, r3, #2
 80048ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <TIM_OC1_SetConfig+0x11c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_OC1_SetConfig+0x88>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2f      	ldr	r2, [pc, #188]	@ (80049c0 <TIM_OC1_SetConfig+0x120>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00f      	beq.n	8004928 <TIM_OC1_SetConfig+0x88>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2e      	ldr	r2, [pc, #184]	@ (80049c4 <TIM_OC1_SetConfig+0x124>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_OC1_SetConfig+0x88>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2d      	ldr	r2, [pc, #180]	@ (80049c8 <TIM_OC1_SetConfig+0x128>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_OC1_SetConfig+0x88>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2c      	ldr	r2, [pc, #176]	@ (80049cc <TIM_OC1_SetConfig+0x12c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC1_SetConfig+0x88>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a2b      	ldr	r2, [pc, #172]	@ (80049d0 <TIM_OC1_SetConfig+0x130>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10c      	bne.n	8004942 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0308 	bic.w	r3, r3, #8
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <TIM_OC1_SetConfig+0x11c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <TIM_OC1_SetConfig+0xd2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <TIM_OC1_SetConfig+0x120>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00f      	beq.n	8004972 <TIM_OC1_SetConfig+0xd2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <TIM_OC1_SetConfig+0x124>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_OC1_SetConfig+0xd2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1a      	ldr	r2, [pc, #104]	@ (80049c8 <TIM_OC1_SetConfig+0x128>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <TIM_OC1_SetConfig+0xd2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <TIM_OC1_SetConfig+0x12c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC1_SetConfig+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <TIM_OC1_SetConfig+0x130>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40015000 	.word	0x40015000

080049d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 0210 	bic.w	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0320 	bic.w	r3, r3, #32
 8004a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <TIM_OC2_SetConfig+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_OC2_SetConfig+0x74>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae8 <TIM_OC2_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_OC2_SetConfig+0x74>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <TIM_OC2_SetConfig+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10d      	bne.n	8004a64 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae4 <TIM_OC2_SetConfig+0x110>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <TIM_OC2_SetConfig+0xc0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <TIM_OC2_SetConfig+0x114>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00f      	beq.n	8004a94 <TIM_OC2_SetConfig+0xc0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <TIM_OC2_SetConfig+0x11c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_OC2_SetConfig+0xc0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <TIM_OC2_SetConfig+0x120>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_OC2_SetConfig+0xc0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <TIM_OC2_SetConfig+0x124>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC2_SetConfig+0xc0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <TIM_OC2_SetConfig+0x118>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d113      	bne.n	8004abc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40013400 	.word	0x40013400
 8004aec:	40015000 	.word	0x40015000
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2b      	ldr	r2, [pc, #172]	@ (8004c08 <TIM_OC3_SetConfig+0x10c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <TIM_OC3_SetConfig+0x72>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2a      	ldr	r2, [pc, #168]	@ (8004c0c <TIM_OC3_SetConfig+0x110>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC3_SetConfig+0x72>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a29      	ldr	r2, [pc, #164]	@ (8004c10 <TIM_OC3_SetConfig+0x114>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10d      	bne.n	8004b8a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c08 <TIM_OC3_SetConfig+0x10c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <TIM_OC3_SetConfig+0xbe>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	@ (8004c0c <TIM_OC3_SetConfig+0x110>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00f      	beq.n	8004bba <TIM_OC3_SetConfig+0xbe>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c14 <TIM_OC3_SetConfig+0x118>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <TIM_OC3_SetConfig+0xbe>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <TIM_OC3_SetConfig+0x11c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d007      	beq.n	8004bba <TIM_OC3_SetConfig+0xbe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1b      	ldr	r2, [pc, #108]	@ (8004c1c <TIM_OC3_SetConfig+0x120>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_OC3_SetConfig+0xbe>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <TIM_OC3_SetConfig+0x114>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d113      	bne.n	8004be2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40013400 	.word	0x40013400
 8004c10:	40015000 	.word	0x40015000
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800

08004c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <TIM_OC4_SetConfig+0x110>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <TIM_OC4_SetConfig+0x74>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <TIM_OC4_SetConfig+0x114>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC4_SetConfig+0x74>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <TIM_OC4_SetConfig+0x118>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10d      	bne.n	8004cb0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	031b      	lsls	r3, r3, #12
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <TIM_OC4_SetConfig+0x110>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <TIM_OC4_SetConfig+0xc0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	@ (8004d34 <TIM_OC4_SetConfig+0x114>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00f      	beq.n	8004ce0 <TIM_OC4_SetConfig+0xc0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d3c <TIM_OC4_SetConfig+0x11c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <TIM_OC4_SetConfig+0xc0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <TIM_OC4_SetConfig+0x120>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <TIM_OC4_SetConfig+0xc0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d44 <TIM_OC4_SetConfig+0x124>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC4_SetConfig+0xc0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <TIM_OC4_SetConfig+0x118>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d113      	bne.n	8004d08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	019b      	lsls	r3, r3, #6
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40013400 	.word	0x40013400
 8004d38:	40015000 	.word	0x40015000
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a19      	ldr	r2, [pc, #100]	@ (8004e04 <TIM_OC5_SetConfig+0xbc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <TIM_OC5_SetConfig+0x82>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a18      	ldr	r2, [pc, #96]	@ (8004e08 <TIM_OC5_SetConfig+0xc0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <TIM_OC5_SetConfig+0x82>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a17      	ldr	r2, [pc, #92]	@ (8004e0c <TIM_OC5_SetConfig+0xc4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_OC5_SetConfig+0x82>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a16      	ldr	r2, [pc, #88]	@ (8004e10 <TIM_OC5_SetConfig+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_OC5_SetConfig+0x82>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a15      	ldr	r2, [pc, #84]	@ (8004e14 <TIM_OC5_SetConfig+0xcc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC5_SetConfig+0x82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <TIM_OC5_SetConfig+0xd0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d109      	bne.n	8004dde <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800
 8004e18:	40015000 	.word	0x40015000

08004e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	051b      	lsls	r3, r3, #20
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1a      	ldr	r2, [pc, #104]	@ (8004edc <TIM_OC6_SetConfig+0xc0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <TIM_OC6_SetConfig+0x84>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <TIM_OC6_SetConfig+0xc4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <TIM_OC6_SetConfig+0x84>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a18      	ldr	r2, [pc, #96]	@ (8004ee4 <TIM_OC6_SetConfig+0xc8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <TIM_OC6_SetConfig+0x84>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ee8 <TIM_OC6_SetConfig+0xcc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d007      	beq.n	8004ea0 <TIM_OC6_SetConfig+0x84>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <TIM_OC6_SetConfig+0xd0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC6_SetConfig+0x84>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ef0 <TIM_OC6_SetConfig+0xd4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d109      	bne.n	8004eb4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40015000 	.word	0x40015000

08004ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 030a 	bic.w	r3, r3, #10
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b087      	sub	sp, #28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 0210 	bic.w	r2, r3, #16
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	031b      	lsls	r3, r3, #12
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f043 0307 	orr.w	r3, r3, #7
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	431a      	orrs	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2201      	movs	r2, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800508c:	2302      	movs	r3, #2
 800508e:	e074      	b.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a34      	ldr	r2, [pc, #208]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a33      	ldr	r2, [pc, #204]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a31      	ldr	r2, [pc, #196]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d108      	bne.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a21      	ldr	r2, [pc, #132]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005110:	d01d      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1d      	ldr	r2, [pc, #116]	@ (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1c      	ldr	r2, [pc, #112]	@ (800519c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a15      	ldr	r2, [pc, #84]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a11      	ldr	r2, [pc, #68]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10c      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4313      	orrs	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40013400 	.word	0x40013400
 8005190:	40015000 	.word	0x40015000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40014000 	.word	0x40014000

080051a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e078      	b.n	80052b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1c      	ldr	r2, [pc, #112]	@ (80052c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1b      	ldr	r2, [pc, #108]	@ (80052c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a19      	ldr	r2, [pc, #100]	@ (80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d11c      	bne.n	80052a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	051b      	lsls	r3, r3, #20
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40015000 	.word	0x40015000

080052cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e042      	b.n	80053f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fc fbcf 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2224      	movs	r2, #36	@ 0x24
 8005386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb24 	bl	80059f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f825 	bl	80053f8 <UART_SetConfig>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e01b      	b.n	80053f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fba3 	bl	8005b34 <UART_CheckIdleState>
 80053ee:	4603      	mov	r3, r0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053fc:	b08c      	sub	sp, #48	@ 0x30
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	431a      	orrs	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	431a      	orrs	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	4313      	orrs	r3, r2
 800541e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4baa      	ldr	r3, [pc, #680]	@ (80056d0 <UART_SetConfig+0x2d8>)
 8005428:	4013      	ands	r3, r2
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005430:	430b      	orrs	r3, r1
 8005432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a9f      	ldr	r2, [pc, #636]	@ (80056d4 <UART_SetConfig+0x2dc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005460:	4313      	orrs	r3, r2
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800546e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005478:	430b      	orrs	r3, r1
 800547a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	f023 010f 	bic.w	r1, r3, #15
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a90      	ldr	r2, [pc, #576]	@ (80056d8 <UART_SetConfig+0x2e0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d125      	bne.n	80054e8 <UART_SetConfig+0xf0>
 800549c:	4b8f      	ldr	r3, [pc, #572]	@ (80056dc <UART_SetConfig+0x2e4>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d81a      	bhi.n	80054e0 <UART_SetConfig+0xe8>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <UART_SetConfig+0xb8>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054d9 	.word	0x080054d9
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c6:	e116      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80054c8:	2302      	movs	r3, #2
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e112      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e10e      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e10a      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e106      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7c      	ldr	r2, [pc, #496]	@ (80056e0 <UART_SetConfig+0x2e8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d138      	bne.n	8005564 <UART_SetConfig+0x16c>
 80054f2:	4b7a      	ldr	r3, [pc, #488]	@ (80056dc <UART_SetConfig+0x2e4>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	d82d      	bhi.n	800555c <UART_SetConfig+0x164>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <UART_SetConfig+0x110>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800553d 	.word	0x0800553d
 800550c:	0800555d 	.word	0x0800555d
 8005510:	0800555d 	.word	0x0800555d
 8005514:	0800555d 	.word	0x0800555d
 8005518:	0800554d 	.word	0x0800554d
 800551c:	0800555d 	.word	0x0800555d
 8005520:	0800555d 	.word	0x0800555d
 8005524:	0800555d 	.word	0x0800555d
 8005528:	08005545 	.word	0x08005545
 800552c:	0800555d 	.word	0x0800555d
 8005530:	0800555d 	.word	0x0800555d
 8005534:	0800555d 	.word	0x0800555d
 8005538:	08005555 	.word	0x08005555
 800553c:	2300      	movs	r3, #0
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005542:	e0d8      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005544:	2302      	movs	r3, #2
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554a:	e0d4      	b.n	80056f6 <UART_SetConfig+0x2fe>
 800554c:	2304      	movs	r3, #4
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005552:	e0d0      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005554:	2308      	movs	r3, #8
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e0cc      	b.n	80056f6 <UART_SetConfig+0x2fe>
 800555c:	2310      	movs	r3, #16
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e0c8      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a5e      	ldr	r2, [pc, #376]	@ (80056e4 <UART_SetConfig+0x2ec>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d125      	bne.n	80055ba <UART_SetConfig+0x1c2>
 800556e:	4b5b      	ldr	r3, [pc, #364]	@ (80056dc <UART_SetConfig+0x2e4>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005578:	2b30      	cmp	r3, #48	@ 0x30
 800557a:	d016      	beq.n	80055aa <UART_SetConfig+0x1b2>
 800557c:	2b30      	cmp	r3, #48	@ 0x30
 800557e:	d818      	bhi.n	80055b2 <UART_SetConfig+0x1ba>
 8005580:	2b20      	cmp	r3, #32
 8005582:	d00a      	beq.n	800559a <UART_SetConfig+0x1a2>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d814      	bhi.n	80055b2 <UART_SetConfig+0x1ba>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <UART_SetConfig+0x19a>
 800558c:	2b10      	cmp	r3, #16
 800558e:	d008      	beq.n	80055a2 <UART_SetConfig+0x1aa>
 8005590:	e00f      	b.n	80055b2 <UART_SetConfig+0x1ba>
 8005592:	2300      	movs	r3, #0
 8005594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005598:	e0ad      	b.n	80056f6 <UART_SetConfig+0x2fe>
 800559a:	2302      	movs	r3, #2
 800559c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a0:	e0a9      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80055a2:	2304      	movs	r3, #4
 80055a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a8:	e0a5      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80055aa:	2308      	movs	r3, #8
 80055ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b0:	e0a1      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80055b2:	2310      	movs	r3, #16
 80055b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b8:	e09d      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a4a      	ldr	r2, [pc, #296]	@ (80056e8 <UART_SetConfig+0x2f0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d125      	bne.n	8005610 <UART_SetConfig+0x218>
 80055c4:	4b45      	ldr	r3, [pc, #276]	@ (80056dc <UART_SetConfig+0x2e4>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d0:	d016      	beq.n	8005600 <UART_SetConfig+0x208>
 80055d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d4:	d818      	bhi.n	8005608 <UART_SetConfig+0x210>
 80055d6:	2b80      	cmp	r3, #128	@ 0x80
 80055d8:	d00a      	beq.n	80055f0 <UART_SetConfig+0x1f8>
 80055da:	2b80      	cmp	r3, #128	@ 0x80
 80055dc:	d814      	bhi.n	8005608 <UART_SetConfig+0x210>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <UART_SetConfig+0x1f0>
 80055e2:	2b40      	cmp	r3, #64	@ 0x40
 80055e4:	d008      	beq.n	80055f8 <UART_SetConfig+0x200>
 80055e6:	e00f      	b.n	8005608 <UART_SetConfig+0x210>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e082      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80055f0:	2302      	movs	r3, #2
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e07e      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fe:	e07a      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005606:	e076      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560e:	e072      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a35      	ldr	r2, [pc, #212]	@ (80056ec <UART_SetConfig+0x2f4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d12a      	bne.n	8005670 <UART_SetConfig+0x278>
 800561a:	4b30      	ldr	r3, [pc, #192]	@ (80056dc <UART_SetConfig+0x2e4>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005624:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005628:	d01a      	beq.n	8005660 <UART_SetConfig+0x268>
 800562a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800562e:	d81b      	bhi.n	8005668 <UART_SetConfig+0x270>
 8005630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005634:	d00c      	beq.n	8005650 <UART_SetConfig+0x258>
 8005636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563a:	d815      	bhi.n	8005668 <UART_SetConfig+0x270>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <UART_SetConfig+0x250>
 8005640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005644:	d008      	beq.n	8005658 <UART_SetConfig+0x260>
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x270>
 8005648:	2300      	movs	r3, #0
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e052      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005650:	2302      	movs	r3, #2
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005656:	e04e      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005658:	2304      	movs	r3, #4
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565e:	e04a      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005660:	2308      	movs	r3, #8
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005666:	e046      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005668:	2310      	movs	r3, #16
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566e:	e042      	b.n	80056f6 <UART_SetConfig+0x2fe>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a17      	ldr	r2, [pc, #92]	@ (80056d4 <UART_SetConfig+0x2dc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d13a      	bne.n	80056f0 <UART_SetConfig+0x2f8>
 800567a:	4b18      	ldr	r3, [pc, #96]	@ (80056dc <UART_SetConfig+0x2e4>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005688:	d01a      	beq.n	80056c0 <UART_SetConfig+0x2c8>
 800568a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800568e:	d81b      	bhi.n	80056c8 <UART_SetConfig+0x2d0>
 8005690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005694:	d00c      	beq.n	80056b0 <UART_SetConfig+0x2b8>
 8005696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569a:	d815      	bhi.n	80056c8 <UART_SetConfig+0x2d0>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <UART_SetConfig+0x2b0>
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a4:	d008      	beq.n	80056b8 <UART_SetConfig+0x2c0>
 80056a6:	e00f      	b.n	80056c8 <UART_SetConfig+0x2d0>
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ae:	e022      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80056b0:	2302      	movs	r3, #2
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b6:	e01e      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056be:	e01a      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c6:	e016      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ce:	e012      	b.n	80056f6 <UART_SetConfig+0x2fe>
 80056d0:	cfff69f3 	.word	0xcfff69f3
 80056d4:	40008000 	.word	0x40008000
 80056d8:	40013800 	.word	0x40013800
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40004400 	.word	0x40004400
 80056e4:	40004800 	.word	0x40004800
 80056e8:	40004c00 	.word	0x40004c00
 80056ec:	40005000 	.word	0x40005000
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4aae      	ldr	r2, [pc, #696]	@ (80059b4 <UART_SetConfig+0x5bc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	f040 8097 	bne.w	8005830 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005702:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005706:	2b08      	cmp	r3, #8
 8005708:	d823      	bhi.n	8005752 <UART_SetConfig+0x35a>
 800570a:	a201      	add	r2, pc, #4	@ (adr r2, 8005710 <UART_SetConfig+0x318>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005735 	.word	0x08005735
 8005714:	08005753 	.word	0x08005753
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005753 	.word	0x08005753
 8005720:	08005743 	.word	0x08005743
 8005724:	08005753 	.word	0x08005753
 8005728:	08005753 	.word	0x08005753
 800572c:	08005753 	.word	0x08005753
 8005730:	0800574b 	.word	0x0800574b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fd fdc0 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8005738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800573a:	e010      	b.n	800575e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800573c:	4b9e      	ldr	r3, [pc, #632]	@ (80059b8 <UART_SetConfig+0x5c0>)
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005740:	e00d      	b.n	800575e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005742:	f7fd fd4b 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8005746:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005748:	e009      	b.n	800575e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005750:	e005      	b.n	800575e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800575c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8130 	beq.w	80059c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	4a94      	ldr	r2, [pc, #592]	@ (80059bc <UART_SetConfig+0x5c4>)
 800576c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005770:	461a      	mov	r2, r3
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	fbb3 f3f2 	udiv	r3, r3, r2
 8005778:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	429a      	cmp	r2, r3
 8005788:	d305      	bcc.n	8005796 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d903      	bls.n	800579e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800579c:	e113      	b.n	80059c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	2200      	movs	r2, #0
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	60fa      	str	r2, [r7, #12]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	4a84      	ldr	r2, [pc, #528]	@ (80059bc <UART_SetConfig+0x5c4>)
 80057ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2200      	movs	r2, #0
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057c0:	f7fb f948 	bl	8000a54 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	020b      	lsls	r3, r1, #8
 80057d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057da:	0202      	lsls	r2, r0, #8
 80057dc:	6979      	ldr	r1, [r7, #20]
 80057de:	6849      	ldr	r1, [r1, #4]
 80057e0:	0849      	lsrs	r1, r1, #1
 80057e2:	2000      	movs	r0, #0
 80057e4:	460c      	mov	r4, r1
 80057e6:	4605      	mov	r5, r0
 80057e8:	eb12 0804 	adds.w	r8, r2, r4
 80057ec:	eb43 0905 	adc.w	r9, r3, r5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	469a      	mov	sl, r3
 80057f8:	4693      	mov	fp, r2
 80057fa:	4652      	mov	r2, sl
 80057fc:	465b      	mov	r3, fp
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fb f927 	bl	8000a54 <__aeabi_uldivmod>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4613      	mov	r3, r2
 800580c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005814:	d308      	bcc.n	8005828 <UART_SetConfig+0x430>
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800581c:	d204      	bcs.n	8005828 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	e0ce      	b.n	80059c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800582e:	e0ca      	b.n	80059c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005838:	d166      	bne.n	8005908 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800583a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800583e:	2b08      	cmp	r3, #8
 8005840:	d827      	bhi.n	8005892 <UART_SetConfig+0x49a>
 8005842:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <UART_SetConfig+0x450>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	0800586d 	.word	0x0800586d
 800584c:	08005875 	.word	0x08005875
 8005850:	0800587d 	.word	0x0800587d
 8005854:	08005893 	.word	0x08005893
 8005858:	08005883 	.word	0x08005883
 800585c:	08005893 	.word	0x08005893
 8005860:	08005893 	.word	0x08005893
 8005864:	08005893 	.word	0x08005893
 8005868:	0800588b 	.word	0x0800588b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800586c:	f7fd fd24 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8005870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005872:	e014      	b.n	800589e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005874:	f7fd fd36 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8005878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800587a:	e010      	b.n	800589e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800587c:	4b4e      	ldr	r3, [pc, #312]	@ (80059b8 <UART_SetConfig+0x5c0>)
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005880:	e00d      	b.n	800589e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005882:	f7fd fcab 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8005886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005888:	e009      	b.n	800589e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005890:	e005      	b.n	800589e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800589c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8090 	beq.w	80059c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	4a44      	ldr	r2, [pc, #272]	@ (80059bc <UART_SetConfig+0x5c4>)
 80058ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b8:	005a      	lsls	r2, r3, #1
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	441a      	add	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d916      	bls.n	8005900 <UART_SetConfig+0x508>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d8:	d212      	bcs.n	8005900 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f023 030f 	bic.w	r3, r3, #15
 80058e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	8bfb      	ldrh	r3, [r7, #30]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	8bfa      	ldrh	r2, [r7, #30]
 80058fc:	60da      	str	r2, [r3, #12]
 80058fe:	e062      	b.n	80059c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005906:	e05e      	b.n	80059c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005908:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800590c:	2b08      	cmp	r3, #8
 800590e:	d828      	bhi.n	8005962 <UART_SetConfig+0x56a>
 8005910:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <UART_SetConfig+0x520>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800593d 	.word	0x0800593d
 800591c:	08005945 	.word	0x08005945
 8005920:	0800594d 	.word	0x0800594d
 8005924:	08005963 	.word	0x08005963
 8005928:	08005953 	.word	0x08005953
 800592c:	08005963 	.word	0x08005963
 8005930:	08005963 	.word	0x08005963
 8005934:	08005963 	.word	0x08005963
 8005938:	0800595b 	.word	0x0800595b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800593c:	f7fd fcbc 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8005940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005942:	e014      	b.n	800596e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005944:	f7fd fcce 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8005948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800594a:	e010      	b.n	800596e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800594c:	4b1a      	ldr	r3, [pc, #104]	@ (80059b8 <UART_SetConfig+0x5c0>)
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005950:	e00d      	b.n	800596e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005952:	f7fd fc43 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8005956:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005958:	e009      	b.n	800596e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005960:	e005      	b.n	800596e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800596c:	bf00      	nop
    }

    if (pclk != 0U)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d028      	beq.n	80059c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	4a10      	ldr	r2, [pc, #64]	@ (80059bc <UART_SetConfig+0x5c4>)
 800597a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800597e:	461a      	mov	r2, r3
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	fbb3 f2f2 	udiv	r2, r3, r2
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	441a      	add	r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	fbb2 f3f3 	udiv	r3, r2, r3
 8005996:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	2b0f      	cmp	r3, #15
 800599c:	d910      	bls.n	80059c0 <UART_SetConfig+0x5c8>
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a4:	d20c      	bcs.n	80059c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60da      	str	r2, [r3, #12]
 80059b0:	e009      	b.n	80059c6 <UART_SetConfig+0x5ce>
 80059b2:	bf00      	nop
 80059b4:	40008000 	.word	0x40008000
 80059b8:	00f42400 	.word	0x00f42400
 80059bc:	08006128 	.word	0x08006128
      }
      else
      {
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2200      	movs	r2, #0
 80059e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3730      	adds	r7, #48	@ 0x30
 80059ea:	46bd      	mov	sp, r7
 80059ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aee:	d10a      	bne.n	8005b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b098      	sub	sp, #96	@ 0x60
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b44:	f7fc fa0a 	bl	8001f5c <HAL_GetTick>
 8005b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d12f      	bne.n	8005bb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f88e 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d022      	beq.n	8005bb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e063      	b.n	8005c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d149      	bne.n	8005c5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f857 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d03c      	beq.n	8005c5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	623b      	str	r3, [r7, #32]
   return(result);
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e6      	bne.n	8005be0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c32:	61fa      	str	r2, [r7, #28]
 8005c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	69b9      	ldr	r1, [r7, #24]
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e012      	b.n	8005c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3758      	adds	r7, #88	@ 0x58
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c98:	e04f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d04b      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fc f95b 	bl	8001f5c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e04e      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d037      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b80      	cmp	r3, #128	@ 0x80
 8005cce:	d034      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d031      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d110      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2208      	movs	r2, #8
 8005cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f838 	bl	8005d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e029      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d14:	d111      	bne.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f81e 	bl	8005d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e00f      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d0a0      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b095      	sub	sp, #84	@ 0x54
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e3      	bne.n	8005d9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d118      	bne.n	8005e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f023 0310 	bic.w	r3, r3, #16
 8005df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6979      	ldr	r1, [r7, #20]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	613b      	str	r3, [r7, #16]
   return(result);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e6      	bne.n	8005ddc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e22:	bf00      	nop
 8005e24:	3754      	adds	r7, #84	@ 0x54
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e027      	b.n	8005e94 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2224      	movs	r2, #36	@ 0x24
 8005e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e02d      	b.n	8005f14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	@ 0x24
 8005ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f84f 	bl	8005f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e02d      	b.n	8005f90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	@ 0x24
 8005f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f811 	bl	8005f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d108      	bne.n	8005fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fb8:	e031      	b.n	800601e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fba:	2308      	movs	r3, #8
 8005fbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	0e5b      	lsrs	r3, r3, #25
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	0f5b      	lsrs	r3, r3, #29
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	7b3a      	ldrb	r2, [r7, #12]
 8005fe6:	4911      	ldr	r1, [pc, #68]	@ (800602c <UARTEx_SetNbDataToProcess+0x94>)
 8005fe8:	5c8a      	ldrb	r2, [r1, r2]
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fee:	7b3a      	ldrb	r2, [r7, #12]
 8005ff0:	490f      	ldr	r1, [pc, #60]	@ (8006030 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	7b7a      	ldrb	r2, [r7, #13]
 8006004:	4909      	ldr	r1, [pc, #36]	@ (800602c <UARTEx_SetNbDataToProcess+0x94>)
 8006006:	5c8a      	ldrb	r2, [r1, r2]
 8006008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800600c:	7b7a      	ldrb	r2, [r7, #13]
 800600e:	4908      	ldr	r1, [pc, #32]	@ (8006030 <UARTEx_SetNbDataToProcess+0x98>)
 8006010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006012:	fb93 f3f2 	sdiv	r3, r3, r2
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	08006140 	.word	0x08006140
 8006030:	08006148 	.word	0x08006148

08006034 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	ed93 7a06 	vldr	s14, [r3, #24]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	edd3 7a07 	vldr	s15, [r3, #28]
 800604a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	edd3 7a08 	vldr	s15, [r3, #32]
 8006054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	edd3 7a06 	vldr	s15, [r3, #24]
 8006064:	eeb1 7a67 	vneg.f32	s14, s15
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	edd3 7a08 	vldr	s15, [r3, #32]
 800606e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	330c      	adds	r3, #12
 800608e:	220c      	movs	r2, #12
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f804 	bl	80060a0 <memset>
  }

}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <memset>:
 80060a0:	4402      	add	r2, r0
 80060a2:	4603      	mov	r3, r0
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d100      	bne.n	80060aa <memset+0xa>
 80060a8:	4770      	bx	lr
 80060aa:	f803 1b01 	strb.w	r1, [r3], #1
 80060ae:	e7f9      	b.n	80060a4 <memset+0x4>

080060b0 <__libc_init_array>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4d0d      	ldr	r5, [pc, #52]	@ (80060e8 <__libc_init_array+0x38>)
 80060b4:	4c0d      	ldr	r4, [pc, #52]	@ (80060ec <__libc_init_array+0x3c>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	2600      	movs	r6, #0
 80060bc:	42a6      	cmp	r6, r4
 80060be:	d109      	bne.n	80060d4 <__libc_init_array+0x24>
 80060c0:	4d0b      	ldr	r5, [pc, #44]	@ (80060f0 <__libc_init_array+0x40>)
 80060c2:	4c0c      	ldr	r4, [pc, #48]	@ (80060f4 <__libc_init_array+0x44>)
 80060c4:	f000 f818 	bl	80060f8 <_init>
 80060c8:	1b64      	subs	r4, r4, r5
 80060ca:	10a4      	asrs	r4, r4, #2
 80060cc:	2600      	movs	r6, #0
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	d105      	bne.n	80060de <__libc_init_array+0x2e>
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d8:	4798      	blx	r3
 80060da:	3601      	adds	r6, #1
 80060dc:	e7ee      	b.n	80060bc <__libc_init_array+0xc>
 80060de:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e2:	4798      	blx	r3
 80060e4:	3601      	adds	r6, #1
 80060e6:	e7f2      	b.n	80060ce <__libc_init_array+0x1e>
 80060e8:	08006158 	.word	0x08006158
 80060ec:	08006158 	.word	0x08006158
 80060f0:	08006158 	.word	0x08006158
 80060f4:	0800615c 	.word	0x0800615c

080060f8 <_init>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr

08006104 <_fini>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr
