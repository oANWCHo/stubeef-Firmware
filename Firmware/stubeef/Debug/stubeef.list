
stubeef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005fb4  08005fb4  00006fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00006ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00006ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006004  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000010  08006010  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08006010  000082dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163df  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002976  00000000  00000000  0001e41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00020d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5a  00000000  00000000  00022110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002742d  00000000  00000000  0002306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e2d  00000000  00000000  0004a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100697  00000000  00000000  000622c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016295b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f0  00000000  00000000  001629a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00167e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f9c 	.word	0x08005f9c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005f9c 	.word	0x08005f9c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000d4a:	f000 fff4 	bl	8001d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f8cd 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fb27 	bl	80013a4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d56:	f000 f955 	bl	8001004 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000d5a:	f000 f913 	bl	8000f84 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d5e:	f000 f99b 	bl	8001098 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d62:	f000 fa7b 	bl	800125c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d66:	f000 fa2b 	bl	80011c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d6a:	f000 facd 	bl	8001308 <MX_TIM5_Init>
//
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
//  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);

  	//pwm setup
	HAL_TIM_Base_Start(&htim1);
 8000d6e:	484a      	ldr	r0, [pc, #296]	@ (8000e98 <main+0x154>)
 8000d70:	f002 fd0c 	bl	800378c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4848      	ldr	r0, [pc, #288]	@ (8000e98 <main+0x154>)
 8000d78:	f002 fe48 	bl	8003a0c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000d7c:	4b46      	ldr	r3, [pc, #280]	@ (8000e98 <main+0x154>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d84:	213c      	movs	r1, #60	@ 0x3c
 8000d86:	4845      	ldr	r0, [pc, #276]	@ (8000e9c <main+0x158>)
 8000d88:	f002 fff8 	bl	8003d7c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8000d8c:	4844      	ldr	r0, [pc, #272]	@ (8000ea0 <main+0x15c>)
 8000d8e:	f002 fd6d 	bl	800386c <HAL_TIM_Base_Start_IT>
	upper = 0;
 8000d92:	4944      	ldr	r1, [pc, #272]	@ (8000ea4 <main+0x160>)
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c1 2300 	strd	r2, r3, [r1]

	PID.Kp =0.1;
 8000da0:	4b41      	ldr	r3, [pc, #260]	@ (8000ea8 <main+0x164>)
 8000da2:	4a42      	ldr	r2, [pc, #264]	@ (8000eac <main+0x168>)
 8000da4:	619a      	str	r2, [r3, #24]
	PID.Ki =0.0;
 8000da6:	4b40      	ldr	r3, [pc, #256]	@ (8000ea8 <main+0x164>)
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
	PID.Kd = 0.0;
 8000dae:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea8 <main+0x164>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&PID, 0);
 8000db6:	2100      	movs	r1, #0
 8000db8:	483b      	ldr	r0, [pc, #236]	@ (8000ea8 <main+0x164>)
 8000dba:	f005 f88d 	bl	8005ed8 <arm_pid_init_f32>

//	 Degree = QEIReadRaw*360/8192;
//	 Radian = QEIReadRaw*(2*3.14)/8192;
	 //Call every 0.1 s
	 static uint64_t timestamp =0;
	 int64_t currentTime = Micros();
 8000dbe:	f000 fbcf 	bl	8001560 <Micros>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	e9c7 2300 	strd	r2, r3, [r7]
	 ReadLimit();
 8000dca:	f000 fd3f 	bl	800184c <ReadLimit>
	 if(currentTime > timestamp)
 8000dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dd2:	4937      	ldr	r1, [pc, #220]	@ (8000eb0 <main+0x16c>)
 8000dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	eb71 0303 	sbcs.w	r3, r1, r3
 8000dde:	d238      	bcs.n	8000e52 <main+0x10e>
	 {
		 timestamp =currentTime + 10;//us
 8000de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000de4:	f112 040a 	adds.w	r4, r2, #10
 8000de8:	f143 0500 	adc.w	r5, r3, #0
 8000dec:	4622      	mov	r2, r4
 8000dee:	462b      	mov	r3, r5
 8000df0:	492f      	ldr	r1, [pc, #188]	@ (8000eb0 <main+0x16c>)
 8000df2:	e9c1 2300 	strd	r2, r3, [r1]
//		 QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
		 QEIEncoderPosVel_Update();
 8000df6:	f000 fbe7 	bl	80015c8 <QEIEncoderPosVel_Update>
//		 }
//		 if (diffPos < -100) {
//			 numOfRound += 1;
//		 }

		 realPos = QEIReadRaw + numOfRound * 200;
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb4 <main+0x170>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	23c8      	movs	r3, #200	@ 0xc8
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <main+0x174>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ebc <main+0x178>)
 8000e10:	6013      	str	r3, [r2, #0]
		 velodegree = QEIdata.QEIAngularVelocity;
 8000e12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <main+0x17c>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec4 <main+0x180>)
 8000e18:	6013      	str	r3, [r2, #0]
		 velodegree = (velodegree*60)/800;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <main+0x180>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000ec8 <main+0x184>
 8000e24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e28:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000ecc <main+0x188>
 8000e2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <main+0x180>)
 8000e32:	edc3 7a00 	vstr	s15, [r3]
		 linearspeed = velodegree*14/60.0;
 8000e36:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <main+0x180>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8000e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e44:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000ec8 <main+0x184>
 8000e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <main+0x18c>)
 8000e4e:	edc3 7a00 	vstr	s15, [r3]
//		 if(velodegree > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);}
//		 else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);}


	 }
	 ReadLogicConv();
 8000e52:	f000 fc89 	bl	8001768 <ReadLogicConv>
	 ReadButton();
 8000e56:	f000 fcb9 	bl	80017cc <ReadButton>
//	 RelayDrive();
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, ro1);// Relay1
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <main+0x190>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2102      	movs	r1, #2
 8000e62:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <main+0x194>)
 8000e64:	f001 fa82 	bl	800236c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ro2);// Relay1
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <main+0x198>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2102      	movs	r1, #2
 8000e70:	481b      	ldr	r0, [pc, #108]	@ (8000ee0 <main+0x19c>)
 8000e72:	f001 fa7b 	bl	800236c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ro3);// Relay1
 8000e76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <main+0x1a0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4818      	ldr	r0, [pc, #96]	@ (8000ee0 <main+0x19c>)
 8000e80:	f001 fa74 	bl	800236c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, ro4);// Relay1
 8000e84:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <main+0x1a4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8e:	4814      	ldr	r0, [pc, #80]	@ (8000ee0 <main+0x19c>)
 8000e90:	f001 fa6c 	bl	800236c <HAL_GPIO_WritePin>
  {
 8000e94:	e793      	b.n	8000dbe <main+0x7a>
 8000e96:	bf00      	nop
 8000e98:	20000114 	.word	0x20000114
 8000e9c:	200001ac 	.word	0x200001ac
 8000ea0:	200001f8 	.word	0x200001f8
 8000ea4:	20000248 	.word	0x20000248
 8000ea8:	200002a8 	.word	0x200002a8
 8000eac:	3dcccccd 	.word	0x3dcccccd
 8000eb0:	200002d0 	.word	0x200002d0
 8000eb4:	20000254 	.word	0x20000254
 8000eb8:	2000025c 	.word	0x2000025c
 8000ebc:	20000258 	.word	0x20000258
 8000ec0:	20000268 	.word	0x20000268
 8000ec4:	20000260 	.word	0x20000260
 8000ec8:	42700000 	.word	0x42700000
 8000ecc:	44480000 	.word	0x44480000
 8000ed0:	20000250 	.word	0x20000250
 8000ed4:	200002a1 	.word	0x200002a1
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	200002a2 	.word	0x200002a2
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	200002a3 	.word	0x200002a3
 8000ee8:	200002a4 	.word	0x200002a4

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	@ 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	2238      	movs	r2, #56	@ 0x38
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 f822 	bl	8005f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f001 fbb4 	bl	800267c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1e:	2340      	movs	r3, #64	@ 0x40
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f2e:	2355      	movs	r3, #85	@ 0x55
 8000f30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fc4e 	bl	80027e4 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f4e:	f000 fc99 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	230f      	movs	r3, #15
 8000f54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2303      	movs	r3, #3
 8000f58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 ff4c 	bl	8002e08 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f76:	f000 fc85 	bl	8001884 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3750      	adds	r7, #80	@ 0x50
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <MX_I2C1_Init+0x78>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <MX_I2C1_Init+0x7c>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fc0:	f001 fa29 	bl	8002416 <HAL_I2C_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fca:	f000 fc5b 	bl	8001884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fd2:	f001 fabb 	bl	800254c <HAL_I2CEx_ConfigAnalogFilter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f000 fc52 	bl	8001884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_I2C1_Init+0x74>)
 8000fe4:	f001 fafd 	bl	80025e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 fc49 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000002c 	.word	0x2000002c
 8000ffc:	40005400 	.word	0x40005400
 8001000:	30a0a7fb 	.word	0x30a0a7fb

08001004 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800100a:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_LPUART1_UART_Init+0x90>)
 800100c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001042:	2200      	movs	r2, #0
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 8001048:	f004 f8d8 	bl	80051fc <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001052:	f000 fc17 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	480d      	ldr	r0, [pc, #52]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800105a:	f004 fe73 	bl	8005d44 <HAL_UARTEx_SetTxFifoThreshold>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001064:	f000 fc0e 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800106c:	f004 fea8 	bl	8005dc0 <HAL_UARTEx_SetRxFifoThreshold>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001076:	f000 fc05 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_LPUART1_UART_Init+0x8c>)
 800107c:	f004 fe29 	bl	8005cd2 <HAL_UARTEx_DisableFifoMode>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001086:	f000 fbfd 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000080 	.word	0x20000080
 8001094:	40008000 	.word	0x40008000

08001098 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b098      	sub	sp, #96	@ 0x60
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2234      	movs	r2, #52	@ 0x34
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 ff3d 	bl	8005f44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010cc:	4a3b      	ldr	r2, [pc, #236]	@ (80011bc <MX_TIM1_Init+0x124>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80010d0:	4b39      	ldr	r3, [pc, #228]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010d2:	22a9      	movs	r2, #169	@ 0xa9
 80010d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 80010dc:	4b36      	ldr	r3, [pc, #216]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010de:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80010e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ea:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010f6:	4830      	ldr	r0, [pc, #192]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80010f8:	f002 fc30 	bl	800395c <HAL_TIM_PWM_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 fbbf 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001112:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001116:	4619      	mov	r1, r3
 8001118:	4827      	ldr	r0, [pc, #156]	@ (80011b8 <MX_TIM1_Init+0x120>)
 800111a:	f003 feff 	bl	8004f1c <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 fbae 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001128:	2360      	movs	r3, #96	@ 0x60
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001130:	2300      	movs	r3, #0
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <MX_TIM1_Init+0x120>)
 800114e:	f002 fff3 	bl	8004138 <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001158:	f000 fb94 	bl	8001884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001170:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001174:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <MX_TIM1_Init+0x120>)
 800119a:	f003 ff55 	bl	8005048 <HAL_TIMEx_ConfigBreakDeadTime>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80011a4:	f000 fb6e 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <MX_TIM1_Init+0x120>)
 80011aa:	f000 fd05 	bl	8001bb8 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3760      	adds	r7, #96	@ 0x60
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000114 	.word	0x20000114
 80011bc:	40012c00 	.word	0x40012c00

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011de:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <MX_TIM2_Init+0x98>)
 80011e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <MX_TIM2_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_TIM2_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <MX_TIM2_Init+0x98>)
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <MX_TIM2_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_TIM2_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001206:	4814      	ldr	r0, [pc, #80]	@ (8001258 <MX_TIM2_Init+0x98>)
 8001208:	f002 fa68 	bl	80036dc <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001212:	f000 fb37 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_TIM2_Init+0x98>)
 8001224:	f003 f89c 	bl	8004360 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800122e:	f000 fb29 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <MX_TIM2_Init+0x98>)
 8001240:	f003 fe6c 	bl	8004f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800124a:	f000 fb1b 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000160 	.word	0x20000160

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	@ 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fe6a 	bl	8005f44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_TIM3_Init+0xa4>)
 800127c:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <MX_TIM3_Init+0xa8>)
 800127e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_TIM3_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM3_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM3_Init+0xa4>)
 800128e:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 8001292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM3_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM3_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM3_Init+0xa4>)
 80012cc:	f002 fcb0 	bl	8003c30 <HAL_TIM_Encoder_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012d6:	f000 fad5 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM3_Init+0xa4>)
 80012e8:	f003 fe18 	bl	8004f1c <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012f2:	f000 fac7 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	@ 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001ac 	.word	0x200001ac
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001326:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_TIM5_Init+0x94>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <MX_TIM5_Init+0x98>)
 800132a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_TIM5_Init+0x94>)
 800132e:	22a9      	movs	r2, #169	@ 0xa9
 8001330:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_TIM5_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_TIM5_Init+0x94>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_TIM5_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_TIM5_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	@ (800139c <MX_TIM5_Init+0x94>)
 800134e:	f002 f9c5 	bl	80036dc <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 fa94 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_TIM5_Init+0x94>)
 800136a:	f002 fff9 	bl	8004360 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 fa86 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_TIM5_Init+0x94>)
 8001386:	f003 fdc9 	bl	8004f1c <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fa78 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001f8 	.word	0x200001f8
 80013a0:	40000c00 	.word	0x40000c00

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b57      	ldr	r3, [pc, #348]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a56      	ldr	r2, [pc, #344]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a50      	ldr	r2, [pc, #320]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b48      	ldr	r3, [pc, #288]	@ (8001518 <MX_GPIO_Init+0x174>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <MX_GPIO_Init+0x174>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a44      	ldr	r2, [pc, #272]	@ (8001518 <MX_GPIO_Init+0x174>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_GPIO_Init+0x174>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Relay1_Pin|DIROUT_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	210a      	movs	r1, #10
 800141e:	483f      	ldr	r0, [pc, #252]	@ (800151c <MX_GPIO_Init+0x178>)
 8001420:	f000 ffa4 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2120      	movs	r1, #32
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f000 ff9e 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay2_Pin|Relay3_Pin|Relay4_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f240 2106 	movw	r1, #518	@ 0x206
 8001436:	483a      	ldr	r0, [pc, #232]	@ (8001520 <MX_GPIO_Init+0x17c>)
 8001438:	f000 ff98 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800143c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001442:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4832      	ldr	r0, [pc, #200]	@ (800151c <MX_GPIO_Init+0x178>)
 8001454:	f000 fdf0 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay1_Pin DIROUT_Pin */
  GPIO_InitStruct.Pin = Relay1_Pin|DIROUT_Pin;
 8001458:	230a      	movs	r3, #10
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	482b      	ldr	r0, [pc, #172]	@ (800151c <MX_GPIO_Init+0x178>)
 8001470:	f000 fde2 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon1_Pin LogicCon2_Pin LogicCon3_Pin BT3_Pin
                           BT4_Pin BT5_Pin */
  GPIO_InitStruct.Pin = LogicCon1_Pin|LogicCon2_Pin|LogicCon3_Pin|BT3_Pin
 8001474:	f240 7313 	movw	r3, #1811	@ 0x713
 8001478:	617b      	str	r3, [r7, #20]
                          |BT4_Pin|BT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148c:	f000 fdd4 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001490:	2320      	movs	r3, #32
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014aa:	f000 fdc5 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LogicCon4_Pin LimitBottom_Pin */
  GPIO_InitStruct.Pin = LogicCon4_Pin|LimitBottom_Pin;
 80014ae:	2341      	movs	r3, #65	@ 0x41
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4817      	ldr	r0, [pc, #92]	@ (8001520 <MX_GPIO_Init+0x17c>)
 80014c2:	f000 fdb9 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay2_Pin Relay3_Pin Relay4_Pin */
  GPIO_InitStruct.Pin = Relay2_Pin|Relay3_Pin|Relay4_Pin;
 80014c6:	f240 2306 	movw	r3, #518	@ 0x206
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4810      	ldr	r0, [pc, #64]	@ (8001520 <MX_GPIO_Init+0x17c>)
 80014e0:	f000 fdaa 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LimitTop_Pin BT1_Pin BT2_Pin */
  GPIO_InitStruct.Pin = LimitTop_Pin|BT1_Pin|BT2_Pin;
 80014e4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <MX_GPIO_Init+0x178>)
 80014fa:	f000 fd9d 	bl	8002038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2028      	movs	r0, #40	@ 0x28
 8001504:	f000 fd63 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001508:	2028      	movs	r0, #40	@ 0x28
 800150a:	f000 fd7a 	bl	8002002 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	48000800 	.word	0x48000800
 8001520:	48000400 	.word	0x48000400

08001524 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10d      	bne.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x2c>
{
	upper+=1;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	1c54      	adds	r4, r2, #1
 800153c:	f143 0500 	adc.w	r5, r3, #0
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001542:	e9c3 4500 	strd	r4, r5, [r3]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001546:	2120      	movs	r1, #32
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f000 ff26 	bl	800239c <HAL_GPIO_TogglePin>
}
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bdb0      	pop	{r4, r5, r7, pc}
 8001558:	200001f8 	.word	0x200001f8
 800155c:	20000248 	.word	0x20000248

08001560 <Micros>:

uint64_t Micros(){
 8001560:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <Micros+0x5c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	60fb      	str	r3, [r7, #12]
	time = (upper<<32)|lower;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <Micros+0x60>)
 8001582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	4643      	mov	r3, r8
 8001590:	2200      	movs	r2, #0
 8001592:	68fe      	ldr	r6, [r7, #12]
 8001594:	f04f 0c00 	mov.w	ip, #0
 8001598:	4630      	mov	r0, r6
 800159a:	4661      	mov	r1, ip
 800159c:	ea42 0400 	orr.w	r4, r2, r0
 80015a0:	ea43 0501 	orr.w	r5, r3, r1
 80015a4:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 80015a8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200001f8 	.word	0x200001f8
 80015c0:	20000248 	.word	0x20000248
 80015c4:	00000000 	.word	0x00000000

080015c8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 80015ce:	f7ff ffc7 	bl	8001560 <Micros>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	495e      	ldr	r1, [pc, #376]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80015d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80015dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <QEIEncoderPosVel_Update+0x18c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80015e4:	6013      	str	r3, [r2, #0]
	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 80015e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <QEIEncoderPosVel_Update+0x190>)
 80015ec:	fba3 1302 	umull	r1, r3, r3, r2
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001604:	4b52      	ldr	r3, [pc, #328]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001606:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW]*360/800;
 800160a:	4b51      	ldr	r3, [pc, #324]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800160c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001610:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800175c <QEIEncoderPosVel_Update+0x194>
 8001614:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001618:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001760 <QEIEncoderPosVel_Update+0x198>
 800161c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001620:	4b4b      	ldr	r3, [pc, #300]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001622:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001626:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	60fb      	str	r3, [r7, #12]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW]-QEIdata.QEIPostion_1turn[OLD];
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001634:	ed93 7a06 	vldr	s14, [r3, #24]
 8001638:	4b45      	ldr	r3, [pc, #276]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800163a:	edd3 7a07 	vldr	s15, [r3, #28]
 800163e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001646:	ee17 3a90 	vmov	r3, s15
 800164a:	60bb      	str	r3, [r7, #8]
	//Handle Warp around
	if(diffPosition > 32400){
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f647 6290 	movw	r2, #32400	@ 0x7e90
 8001652:	4293      	cmp	r3, r2
 8001654:	dd04      	ble.n	8001660 <QEIEncoderPosVel_Update+0x98>
		diffPosition -= 64800;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 800165c:	3b20      	subs	r3, #32
 800165e:	60fb      	str	r3, [r7, #12]
		}
	if(diffPosition < -32400){
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4a40      	ldr	r2, [pc, #256]	@ (8001764 <QEIEncoderPosVel_Update+0x19c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	da04      	bge.n	8001672 <QEIEncoderPosVel_Update+0xaa>
		diffPosition += 64800;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 800166e:	3320      	adds	r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
	}
	//Calculate Linear Position in mm unit
	if(diff1turn > 400){
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001678:	dd09      	ble.n	800168e <QEIEncoderPosVel_Update+0xc6>
			QEIdata.QEIRound -= 1;
 800167a:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800167c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001688:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800168a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		}
	if(diff1turn < -400){
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 8001694:	da09      	bge.n	80016aa <QEIEncoderPosVel_Update+0xe2>
			QEIdata.QEIRound += 1;
 8001696:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001698:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800169c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80016a6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		}
	QEIdata.TotalPos = (QEIdata.QEIRound*14) + QEIdata.QEIPostion_1turn[NEW]*14/800; //linear pos in mm uint
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80016ac:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80016b0:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80016b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016b8:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80016ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80016be:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 80016c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016c6:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8001760 <QEIEncoderPosVel_Update+0x198>
 80016ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80016d4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.00001;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80016da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 80016e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016e4:	1a84      	subs	r4, r0, r2
 80016e6:	eb61 0503 	sbc.w	r5, r1, r3
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_ul2d>
 80016f2:	a315      	add	r3, pc, #84	@ (adr r3, 8001748 <QEIEncoderPosVel_Update+0x180>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff4a 	bl	8000590 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f956 	bl	80009b4 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	607b      	str	r3, [r7, #4]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001716:	ed97 7a01 	vldr	s14, [r7, #4]
 800171a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001720:	edc3 7a08 	vstr	s15, [r3, #32]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800172a:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800172e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001732:	4907      	ldr	r1, [pc, #28]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 8001734:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <QEIEncoderPosVel_Update+0x188>)
 800173e:	61d3      	str	r3, [r2, #28]

}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bdb0      	pop	{r4, r5, r7, pc}
 8001748:	88e368f1 	.word	0x88e368f1
 800174c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001750:	20000268 	.word	0x20000268
 8001754:	200001ac 	.word	0x200001ac
 8001758:	51eb851f 	.word	0x51eb851f
 800175c:	43b40000 	.word	0x43b40000
 8001760:	44480000 	.word	0x44480000
 8001764:	ffff8170 	.word	0xffff8170

08001768 <ReadLogicConv>:

void ReadLogicConv(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);//Lo1
 800176c:	2101      	movs	r1, #1
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f000 fde3 	bl	800233c <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <ReadLogicConv+0x50>)
 800177c:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);//Lo2
 800177e:	2102      	movs	r1, #2
 8001780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001784:	f000 fdda 	bl	800233c <HAL_GPIO_ReadPin>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <ReadLogicConv+0x54>)
 800178e:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);//Lo3
 8001790:	2110      	movs	r1, #16
 8001792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001796:	f000 fdd1 	bl	800233c <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <ReadLogicConv+0x58>)
 80017a0:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);//Lo4
 80017a2:	2101      	movs	r1, #1
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <ReadLogicConv+0x5c>)
 80017a6:	f000 fdc9 	bl	800233c <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <ReadLogicConv+0x60>)
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000298 	.word	0x20000298
 80017bc:	20000299 	.word	0x20000299
 80017c0:	2000029a 	.word	0x2000029a
 80017c4:	48000400 	.word	0x48000400
 80017c8:	2000029b 	.word	0x2000029b

080017cc <ReadButton>:

void ReadButton(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);//BT1
 80017d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d4:	4817      	ldr	r0, [pc, #92]	@ (8001834 <ReadButton+0x68>)
 80017d6:	f000 fdb1 	bl	800233c <HAL_GPIO_ReadPin>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <ReadButton+0x6c>)
 80017e0:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);//BT2
 80017e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e6:	4813      	ldr	r0, [pc, #76]	@ (8001834 <ReadButton+0x68>)
 80017e8:	f000 fda8 	bl	800233c <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <ReadButton+0x70>)
 80017f2:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);//BT3
 80017f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f000 fd9e 	bl	800233c <HAL_GPIO_ReadPin>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <ReadButton+0x74>)
 8001806:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);//BT4
 8001808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800180c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001810:	f000 fd94 	bl	800233c <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <ReadButton+0x78>)
 800181a:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);//BT5
 800181c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f000 fd8a 	bl	800233c <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <ReadButton+0x7c>)
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	48000800 	.word	0x48000800
 8001838:	2000029c 	.word	0x2000029c
 800183c:	2000029d 	.word	0x2000029d
 8001840:	2000029e 	.word	0x2000029e
 8001844:	2000029f 	.word	0x2000029f
 8001848:	200002a0 	.word	0x200002a0

0800184c <ReadLimit>:

void ReadLimit(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);// LimitTop
 8001850:	2180      	movs	r1, #128	@ 0x80
 8001852:	4808      	ldr	r0, [pc, #32]	@ (8001874 <ReadLimit+0x28>)
 8001854:	f000 fd72 	bl	800233c <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <ReadLimit+0x2c>)
 800185e:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);// LimitBottom
 8001860:	2140      	movs	r1, #64	@ 0x40
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <ReadLimit+0x30>)
 8001864:	f000 fd6a 	bl	800233c <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <ReadLimit+0x34>)
 800186e:	701a      	strb	r2, [r3, #0]

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	48000800 	.word	0x48000800
 8001878:	200002a6 	.word	0x200002a6
 800187c:	48000400 	.word	0x48000400
 8001880:	200002a5 	.word	0x200002a5

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <Error_Handler+0x8>

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_MspInit+0x44>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <HAL_MspInit+0x44>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_MspInit+0x44>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x44>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x44>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018c6:	f000 ff7d 	bl	80027c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0a0      	sub	sp, #128	@ 0x80
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	2254      	movs	r2, #84	@ 0x54
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fb23 	bl	8005f44 <memset>
  if(hi2c->Instance==I2C1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2d      	ldr	r2, [pc, #180]	@ (80019b8 <HAL_I2C_MspInit+0xe0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d153      	bne.n	80019b0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001908:	2340      	movs	r3, #64	@ 0x40
 800190a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fc93 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001920:	f7ff ffb0 	bl	8001884 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001928:	4a24      	ldr	r2, [pc, #144]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001940:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001958:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195a:	2312      	movs	r3, #18
 800195c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001966:	2304      	movs	r3, #4
 8001968:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f000 fb60 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2312      	movs	r3, #18
 800197e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001988:	2304      	movs	r3, #4
 800198a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001990:	4619      	mov	r1, r3
 8001992:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <HAL_I2C_MspInit+0xe8>)
 8001994:	f000 fb50 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 800199e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_I2C_MspInit+0xe4>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	3780      	adds	r7, #128	@ 0x80
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005400 	.word	0x40005400
 80019bc:	40021000 	.word	0x40021000
 80019c0:	48000400 	.word	0x48000400

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b09e      	sub	sp, #120	@ 0x78
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2254      	movs	r2, #84	@ 0x54
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 faad 	bl	8005f44 <memset>
  if(huart->Instance==LPUART1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1f      	ldr	r2, [pc, #124]	@ (8001a6c <HAL_UART_MspInit+0xa8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d136      	bne.n	8001a62 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019f4:	2320      	movs	r3, #32
 80019f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fc1d 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a0c:	f7ff ff3a 	bl	8001884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_UART_MspInit+0xac>)
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a14:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <HAL_UART_MspInit+0xac>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_UART_MspInit+0xac>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_UART_MspInit+0xac>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <HAL_UART_MspInit+0xac>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_UART_MspInit+0xac>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a40:	230c      	movs	r3, #12
 8001a42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a50:	230c      	movs	r3, #12
 8001a52:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5e:	f000 faeb 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3778      	adds	r7, #120	@ 0x78
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40008000 	.word	0x40008000
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_TIM_PWM_MspInit+0x38>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10b      	bne.n	8001a9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_TIM_Base_MspInit+0x68>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <HAL_TIM_Base_MspInit+0x68>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_TIM_Base_MspInit+0x68>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ade:	e018      	b.n	8001b12 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8001b20 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d113      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_TIM_Base_MspInit+0x68>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <HAL_TIM_Base_MspInit+0x68>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_TIM_Base_MspInit+0x68>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2032      	movs	r0, #50	@ 0x32
 8001b08:	f000 fa61 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b0c:	2032      	movs	r0, #50	@ 0x32
 8001b0e:	f000 fa78 	bl	8002002 <HAL_NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40000c00 	.word	0x40000c00

08001b24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d130      	bne.n	8001ba8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x90>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8001b76:	23c0      	movs	r3, #192	@ 0xc0
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b86:	2302      	movs	r3, #2
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b94:	f000 fa50 	bl	8002038 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	201d      	movs	r0, #29
 8001b9e:	f000 fa16 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba2:	201d      	movs	r0, #29
 8001ba4:	f000 fa2d 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	@ 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <HAL_TIM_MspPostInit+0x64>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d11b      	bne.n	8001c12 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <HAL_TIM_MspPostInit+0x68>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <HAL_TIM_MspPostInit+0x68>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_TIM_MspPostInit+0x68>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <HAL_TIM_MspPostInit+0x6c>)
 8001c0e:	f000 fa13 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000800 	.word	0x48000800

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <NMI_Handler+0x4>

08001c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <MemManage_Handler+0x4>

08001c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7e:	f000 f8ad 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <TIM3_IRQHandler+0x10>)
 8001c8e:	f002 f903 	bl	8003e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200001ac 	.word	0x200001ac

08001c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ca0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ca4:	f000 fb94 	bl	80023d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <TIM5_IRQHandler+0x10>)
 8001cb2:	f002 f8f1 	bl	8003e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200001f8 	.word	0x200001f8

08001cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce4:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce8:	f7ff ffea 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	@ (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d12:	f004 f91f 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d16:	f7ff f815 	bl	8000d44 <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   r0, =_estack
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d28:	08006004 	.word	0x08006004
  ldr r2, =_sbss
 8001d2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d30:	200002dc 	.word	0x200002dc

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>

08001d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f939 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f80e 	bl	8001d68 <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	e001      	b.n	8001d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d58:	f7ff fd9a 	bl	8001890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_InitTick+0x68>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d022      	beq.n	8001dc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_InitTick+0x6c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_InitTick+0x68>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f944 	bl	800201e <HAL_SYSTICK_Config>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10f      	bne.n	8001dbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	d809      	bhi.n	8001db6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da2:	2200      	movs	r2, #0
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	f04f 30ff 	mov.w	r0, #4294967295
 8001daa:	f000 f910 	bl	8001fce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <HAL_InitTick+0x70>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e004      	b.n	8001dc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e001      	b.n	8001dc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_IncTick+0x1c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <HAL_IncTick+0x1c>)
 8001dec:	6013      	str	r3, [r2, #0]
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	200002d8 	.word	0x200002d8
 8001dfc:	20000008 	.word	0x20000008

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200002d8 	.word	0x200002d8

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	@ 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff40 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff90 	bl	8001f0c <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5f 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff33 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa4 	bl	8001f74 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002046:	e15a      	b.n	80022fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 814c 	beq.w	80022f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d005      	beq.n	8002078 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002074:	2b02      	cmp	r3, #2
 8002076:	d130      	bne.n	80020da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ae:	2201      	movs	r2, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0201 	and.w	r2, r3, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d017      	beq.n	8002116 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d123      	bne.n	800216a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	6939      	ldr	r1, [r7, #16]
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0203 	and.w	r2, r3, #3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a6 	beq.w	80022f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ac:	4b5b      	ldr	r3, [pc, #364]	@ (800231c <HAL_GPIO_Init+0x2e4>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b0:	4a5a      	ldr	r2, [pc, #360]	@ (800231c <HAL_GPIO_Init+0x2e4>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b8:	4b58      	ldr	r3, [pc, #352]	@ (800231c <HAL_GPIO_Init+0x2e4>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c4:	4a56      	ldr	r2, [pc, #344]	@ (8002320 <HAL_GPIO_Init+0x2e8>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ee:	d01f      	beq.n	8002230 <HAL_GPIO_Init+0x1f8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_GPIO_Init+0x2ec>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d019      	beq.n	800222c <HAL_GPIO_Init+0x1f4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_GPIO_Init+0x2f0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x1f0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a4a      	ldr	r2, [pc, #296]	@ (800232c <HAL_GPIO_Init+0x2f4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a49      	ldr	r2, [pc, #292]	@ (8002330 <HAL_GPIO_Init+0x2f8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a48      	ldr	r2, [pc, #288]	@ (8002334 <HAL_GPIO_Init+0x2fc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x1e4>
 8002218:	2305      	movs	r3, #5
 800221a:	e00a      	b.n	8002232 <HAL_GPIO_Init+0x1fa>
 800221c:	2306      	movs	r3, #6
 800221e:	e008      	b.n	8002232 <HAL_GPIO_Init+0x1fa>
 8002220:	2304      	movs	r3, #4
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1fa>
 8002224:	2303      	movs	r3, #3
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1fa>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1fa>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1fa>
 8002230:	2300      	movs	r3, #0
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002242:	4937      	ldr	r1, [pc, #220]	@ (8002320 <HAL_GPIO_Init+0x2e8>)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002250:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <HAL_GPIO_Init+0x300>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002274:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <HAL_GPIO_Init+0x300>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800227a:	4b2f      	ldr	r3, [pc, #188]	@ (8002338 <HAL_GPIO_Init+0x300>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800229e:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022a4:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022f2:	4a11      	ldr	r2, [pc, #68]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f ae9d 	bne.w	8002048 <HAL_GPIO_Init+0x10>
  }
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40021000 	.word	0x40021000
 8002320:	40010000 	.word	0x40010000
 8002324:	48000400 	.word	0x48000400
 8002328:	48000800 	.word	0x48000800
 800232c:	48000c00 	.word	0x48000c00
 8002330:	48001000 	.word	0x48001000
 8002334:	48001400 	.word	0x48001400
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e001      	b.n	800235e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002388:	e002      	b.n	8002390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43d9      	mvns	r1, r3
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	400b      	ands	r3, r1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e6:	4a05      	ldr	r2, [pc, #20]	@ (80023fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f806 	bl	8002400 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e08d      	b.n	8002544 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fa4b 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2224      	movs	r2, #36	@ 0x24
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002466:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002476:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	e006      	b.n	800249e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800249c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d108      	bne.n	80024b8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e007      	b.n	80024c8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69d9      	ldr	r1, [r3, #28]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d138      	bne.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800256c:	2302      	movs	r3, #2
 800256e:	e032      	b.n	80025d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	@ 0x24
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800259e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d139      	bne.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002602:	2302      	movs	r3, #2
 8002604:	e033      	b.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	@ 0x24
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d141      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800268a:	4b4b      	ldr	r3, [pc, #300]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002696:	d131      	bne.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002698:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269e:	4a46      	ldr	r2, [pc, #280]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a8:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026b0:	4a41      	ldr	r2, [pc, #260]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026b8:	4b40      	ldr	r3, [pc, #256]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2232      	movs	r2, #50	@ 0x32
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	4a3f      	ldr	r2, [pc, #252]	@ (80027c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9b      	lsrs	r3, r3, #18
 80026ca:	3301      	adds	r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ce:	e002      	b.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d6:	4b38      	ldr	r3, [pc, #224]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e2:	d102      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f2      	bne.n	80026d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ea:	4b33      	ldr	r3, [pc, #204]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f6:	d158      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e057      	b.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026fc:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800270c:	e04d      	b.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002714:	d141      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002716:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d131      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002724:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800272a:	4a23      	ldr	r2, [pc, #140]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002734:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800273c:	4a1e      	ldr	r2, [pc, #120]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2232      	movs	r2, #50	@ 0x32
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	0c9b      	lsrs	r3, r3, #18
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275a:	e002      	b.n	8002762 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3b01      	subs	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276e:	d102      	bne.n	8002776 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f2      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002776:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002782:	d112      	bne.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e011      	b.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800278e:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002798:	e007      	b.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800279a:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027a2:	4a05      	ldr	r2, [pc, #20]	@ (80027b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40007000 	.word	0x40007000
 80027bc:	20000000 	.word	0x20000000
 80027c0:	431bde83 	.word	0x431bde83

080027c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d2:	6093      	str	r3, [r2, #8]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e2fe      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	4b97      	ldr	r3, [pc, #604]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280c:	4b94      	ldr	r3, [pc, #592]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d102      	bne.n	8002822 <HAL_RCC_OscConfig+0x3e>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d002      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b8d      	ldr	r3, [pc, #564]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05b      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e2d9      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x74>
 800284a:	4b85      	ldr	r3, [pc, #532]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a84      	ldr	r2, [pc, #528]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b7f      	ldr	r3, [pc, #508]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7e      	ldr	r2, [pc, #504]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7b      	ldr	r2, [pc, #492]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 800287c:	4b78      	ldr	r3, [pc, #480]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a77      	ldr	r2, [pc, #476]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b75      	ldr	r3, [pc, #468]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a74      	ldr	r2, [pc, #464]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff fab0 	bl	8001e00 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff faac 	bl	8001e00 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e29e      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xc0>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff fa9c 	bl	8001e00 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fa98 	bl	8001e00 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e28a      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	4b60      	ldr	r3, [pc, #384]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0xe8>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d075      	beq.n	80029e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fa:	4b59      	ldr	r3, [pc, #356]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002904:	4b56      	ldr	r3, [pc, #344]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d102      	bne.n	800291a <HAL_RCC_OscConfig+0x136>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d002      	beq.n	8002920 <HAL_RCC_OscConfig+0x13c>
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d11f      	bne.n	8002960 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	4b4f      	ldr	r3, [pc, #316]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_OscConfig+0x154>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e25d      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b49      	ldr	r3, [pc, #292]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	4946      	ldr	r1, [pc, #280]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800294c:	4b45      	ldr	r3, [pc, #276]	@ (8002a64 <HAL_RCC_OscConfig+0x280>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fa09 	bl	8001d68 <HAL_InitTick>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d043      	beq.n	80029e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e249      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d023      	beq.n	80029b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff fa44 	bl	8001e00 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff fa40 	bl	8001e00 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e232      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	061b      	lsls	r3, r3, #24
 80029a8:	492d      	ldr	r1, [pc, #180]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
 80029ae:	e01a      	b.n	80029e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80029b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7ff fa20 	bl	8001e00 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c4:	f7ff fa1c 	bl	8001e00 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e20e      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d6:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1e0>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d041      	beq.n	8002a76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a00:	4a17      	ldr	r2, [pc, #92]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7ff f9f9 	bl	8001e00 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff f9f5 	bl	8001e00 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1e7      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ef      	beq.n	8002a12 <HAL_RCC_OscConfig+0x22e>
 8002a32:	e020      	b.n	8002a76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7ff f9dc 	bl	8001e00 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a4a:	e00d      	b.n	8002a68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f9d8 	bl	8001e00 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d906      	bls.n	8002a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1ca      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a68:	4b8c      	ldr	r3, [pc, #560]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ea      	bne.n	8002a4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80a6 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a88:	4b84      	ldr	r3, [pc, #528]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2b4>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x2b6>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aba:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_RCC_OscConfig+0x4bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac6:	4b76      	ldr	r3, [pc, #472]	@ (8002ca0 <HAL_RCC_OscConfig+0x4bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a75      	ldr	r2, [pc, #468]	@ (8002ca0 <HAL_RCC_OscConfig+0x4bc>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f995 	bl	8001e00 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7ff f991 	bl	8001e00 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e183      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca0 <HAL_RCC_OscConfig+0x4bc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_RCC_OscConfig+0x32e>
 8002b00:	4b66      	ldr	r3, [pc, #408]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b10:	e024      	b.n	8002b5c <HAL_RCC_OscConfig+0x378>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d110      	bne.n	8002b3c <HAL_RCC_OscConfig+0x358>
 8002b1a:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	4a5e      	ldr	r2, [pc, #376]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	4a5a      	ldr	r2, [pc, #360]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_OscConfig+0x378>
 8002b3c:	4b57      	ldr	r3, [pc, #348]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	4a56      	ldr	r2, [pc, #344]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b4c:	4b53      	ldr	r3, [pc, #332]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	4a52      	ldr	r2, [pc, #328]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d016      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff f94c 	bl	8001e00 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7ff f948 	bl	8001e00 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e138      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b82:	4b46      	ldr	r3, [pc, #280]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ed      	beq.n	8002b6c <HAL_RCC_OscConfig+0x388>
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7ff f935 	bl	8001e00 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7ff f931 	bl	8001e00 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e121      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ed      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b35      	ldr	r3, [pc, #212]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	4a34      	ldr	r2, [pc, #208]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bea:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7ff f904 	bl	8001e00 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bfc:	f7ff f900 	bl	8001e00 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0f2      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0e:	4b23      	ldr	r3, [pc, #140]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCC_OscConfig+0x418>
 8002c1c:	e01b      	b.n	8002c56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c24:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f8e7 	bl	8001e00 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c36:	f7ff f8e3 	bl	8001e00 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0d5      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c48:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ef      	bne.n	8002c36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80c9 	beq.w	8002df2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c60:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	f000 8083 	beq.w	8002d74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d15e      	bne.n	8002d34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a08      	ldr	r2, [pc, #32]	@ (8002c9c <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7ff f8bd 	bl	8001e00 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	e00c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff f8b9 	bl	8001e00 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d905      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0ab      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	4b55      	ldr	r3, [pc, #340]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ec      	bne.n	8002c8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb0:	4b52      	ldr	r3, [pc, #328]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b52      	ldr	r3, [pc, #328]	@ (8002e00 <HAL_RCC_OscConfig+0x61c>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6a11      	ldr	r1, [r2, #32]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0552      	lsls	r2, r2, #21
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0652      	lsls	r2, r2, #25
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cea:	06d2      	lsls	r2, r2, #27
 8002cec:	430a      	orrs	r2, r1
 8002cee:	4943      	ldr	r1, [pc, #268]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b41      	ldr	r3, [pc, #260]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a40      	ldr	r2, [pc, #256]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d00:	4b3e      	ldr	r3, [pc, #248]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a3d      	ldr	r2, [pc, #244]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f878 	bl	8001e00 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7ff f874 	bl	8001e00 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e066      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	4b35      	ldr	r3, [pc, #212]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x530>
 8002d32:	e05e      	b.n	8002df2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a30      	ldr	r2, [pc, #192]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f85e 	bl	8001e00 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff f85a 	bl	8001e00 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e04c      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4924      	ldr	r1, [pc, #144]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_RCC_OscConfig+0x620>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
 8002d72:	e03e      	b.n	8002df2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e039      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d80:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 0203 	and.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d12c      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d123      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11b      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d113      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	019f800c 	.word	0x019f800c
 8002e04:	feeefffc 	.word	0xfeeefffc

08002e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e11e      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b91      	ldr	r3, [pc, #580]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d910      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b8e      	ldr	r3, [pc, #568]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 020f 	bic.w	r2, r3, #15
 8002e36:	498c      	ldr	r1, [pc, #560]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e106      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d073      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d129      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e64:	4b81      	ldr	r3, [pc, #516]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0f4      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e74:	f000 f99e 	bl	80031b4 <RCC_GetSysClockFreqFromPLLSource>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4a7c      	ldr	r2, [pc, #496]	@ (8003070 <HAL_RCC_ClockConfig+0x268>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d93f      	bls.n	8002f02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e82:	4b7a      	ldr	r3, [pc, #488]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d033      	beq.n	8002f02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d12f      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ea2:	4b72      	ldr	r3, [pc, #456]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eaa:	4a70      	ldr	r2, [pc, #448]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e024      	b.n	8002f02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0c6      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed0:	4b66      	ldr	r3, [pc, #408]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0be      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ee0:	f000 f8ce 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4a61      	ldr	r2, [pc, #388]	@ (8003070 <HAL_RCC_ClockConfig+0x268>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d909      	bls.n	8002f02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eee:	4b5f      	ldr	r3, [pc, #380]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ef6:	4a5d      	ldr	r2, [pc, #372]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b5a      	ldr	r3, [pc, #360]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4957      	ldr	r1, [pc, #348]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f14:	f7fe ff74 	bl	8001e00 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fe ff70 	bl	8001e00 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e095      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b4e      	ldr	r3, [pc, #312]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f5c:	4b43      	ldr	r3, [pc, #268]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a42      	ldr	r2, [pc, #264]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f74:	4b3d      	ldr	r3, [pc, #244]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4936      	ldr	r1, [pc, #216]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
 8002f96:	e008      	b.n	8002faa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b80      	cmp	r3, #128	@ 0x80
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f9e:	4b33      	ldr	r3, [pc, #204]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4a32      	ldr	r2, [pc, #200]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8002fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fa8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002faa:	4b2f      	ldr	r3, [pc, #188]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d21d      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 020f 	bic.w	r2, r3, #15
 8002fc0:	4929      	ldr	r1, [pc, #164]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe ff1a 	bl	8001e00 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe ff16 	bl	8001e00 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e03b      	b.n	800305e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <HAL_RCC_ClockConfig+0x260>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1ed      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4917      	ldr	r1, [pc, #92]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490f      	ldr	r1, [pc, #60]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003032:	f000 f825 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <HAL_RCC_ClockConfig+0x264>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490c      	ldr	r1, [pc, #48]	@ (8003074 <HAL_RCC_ClockConfig+0x26c>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x270>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_RCC_ClockConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fe86 	bl	8001d68 <HAL_InitTick>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000
 800306c:	40021000 	.word	0x40021000
 8003070:	04c4b400 	.word	0x04c4b400
 8003074:	08005fb4 	.word	0x08005fb4
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003086:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d102      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e047      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003098:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a4:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e03e      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030aa:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d136      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3301      	adds	r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d10c      	bne.n	80030ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	4a16      	ldr	r2, [pc, #88]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030de:	68d2      	ldr	r2, [r2, #12]
 80030e0:	0a12      	lsrs	r2, r2, #8
 80030e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	617b      	str	r3, [r7, #20]
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ee:	4a13      	ldr	r2, [pc, #76]	@ (800313c <HAL_RCC_GetSysClockFreq+0xbc>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	4a10      	ldr	r2, [pc, #64]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f8:	68d2      	ldr	r2, [r2, #12]
 80030fa:	0a12      	lsrs	r2, r2, #8
 80030fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0e5b      	lsrs	r3, r3, #25
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	3301      	adds	r3, #1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e001      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003128:	693b      	ldr	r3, [r7, #16]
}
 800312a:	4618      	mov	r0, r3
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	00f42400 	.word	0x00f42400
 8003140:	016e3600 	.word	0x016e3600

08003144 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b03      	ldr	r3, [pc, #12]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000000 	.word	0x20000000

0800315c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003160:	f7ff fff0 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	08005fc4 	.word	0x08005fc4

08003188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800318c:	f7ff ffda 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0adb      	lsrs	r3, r3, #11
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4904      	ldr	r1, [pc, #16]	@ (80031b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08005fc4 	.word	0x08005fc4

080031b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d10c      	bne.n	80031f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d8:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	4a14      	ldr	r2, [pc, #80]	@ (8003234 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031e2:	68d2      	ldr	r2, [r2, #12]
 80031e4:	0a12      	lsrs	r2, r2, #8
 80031e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	617b      	str	r3, [r7, #20]
    break;
 80031f0:	e00c      	b.n	800320c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003234 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fc:	68d2      	ldr	r2, [r2, #12]
 80031fe:	0a12      	lsrs	r2, r2, #8
 8003200:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    break;
 800320a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	0e5b      	lsrs	r3, r3, #25
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	3301      	adds	r3, #1
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003226:	687b      	ldr	r3, [r7, #4]
}
 8003228:	4618      	mov	r0, r3
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40021000 	.word	0x40021000
 8003238:	016e3600 	.word	0x016e3600
 800323c:	00f42400 	.word	0x00f42400

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003248:	2300      	movs	r3, #0
 800324a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800324c:	2300      	movs	r3, #0
 800324e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8098 	beq.w	800338e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b43      	ldr	r3, [pc, #268]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b40      	ldr	r3, [pc, #256]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	4a3f      	ldr	r2, [pc, #252]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
 800327a:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328a:	4b3a      	ldr	r3, [pc, #232]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a39      	ldr	r2, [pc, #228]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003294:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003296:	f7fe fdb3 	bl	8001e00 <HAL_GetTick>
 800329a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329c:	e009      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fe fdaf 	bl	8001e00 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	74fb      	strb	r3, [r7, #19]
        break;
 80032b0:	e005      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b2:	4b30      	ldr	r3, [pc, #192]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ef      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d159      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01e      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d019      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032e0:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ec:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800330c:	4a18      	ldr	r2, [pc, #96]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fe fd6f 	bl	8001e00 <HAL_GetTick>
 8003322:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003324:	e00b      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fe fd6b 	bl	8001e00 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d902      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	74fb      	strb	r3, [r7, #19]
            break;
 800333c:	e006      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ec      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003360:	4903      	ldr	r1, [pc, #12]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003368:	e008      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	74bb      	strb	r3, [r7, #18]
 800336e:	e005      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7c7b      	ldrb	r3, [r7, #17]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4ba7      	ldr	r3, [pc, #668]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	4aa6      	ldr	r2, [pc, #664]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800338c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339a:	4ba1      	ldr	r3, [pc, #644]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	499d      	ldr	r1, [pc, #628]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033bc:	4b98      	ldr	r3, [pc, #608]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f023 020c 	bic.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4995      	ldr	r1, [pc, #596]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033de:	4b90      	ldr	r3, [pc, #576]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	498c      	ldr	r1, [pc, #560]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003400:	4b87      	ldr	r3, [pc, #540]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4984      	ldr	r1, [pc, #528]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003422:	4b7f      	ldr	r3, [pc, #508]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	497b      	ldr	r1, [pc, #492]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003444:	4b76      	ldr	r3, [pc, #472]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	4973      	ldr	r1, [pc, #460]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003466:	4b6e      	ldr	r3, [pc, #440]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	496a      	ldr	r1, [pc, #424]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003488:	4b65      	ldr	r3, [pc, #404]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4962      	ldr	r1, [pc, #392]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	4959      	ldr	r1, [pc, #356]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034cc:	4b54      	ldr	r3, [pc, #336]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	4951      	ldr	r1, [pc, #324]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	4948      	ldr	r1, [pc, #288]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d015      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003510:	4b43      	ldr	r3, [pc, #268]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4940      	ldr	r1, [pc, #256]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352e:	d105      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a3a      	ldr	r2, [pc, #232]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003548:	4b35      	ldr	r3, [pc, #212]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	4932      	ldr	r1, [pc, #200]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003566:	d105      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003568:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003572:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003580:	4b27      	ldr	r3, [pc, #156]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003586:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358e:	4924      	ldr	r1, [pc, #144]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800359e:	d105      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c6:	4916      	ldr	r1, [pc, #88]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035d6:	d105      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d019      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	4908      	ldr	r1, [pc, #32]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360e:	d109      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003610:	4b03      	ldr	r3, [pc, #12]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a02      	ldr	r2, [pc, #8]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800361a:	60d3      	str	r3, [r2, #12]
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d015      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003630:	4b29      	ldr	r3, [pc, #164]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003636:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	4926      	ldr	r1, [pc, #152]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800364e:	d105      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003650:	4b21      	ldr	r3, [pc, #132]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a20      	ldr	r2, [pc, #128]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003668:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003676:	4918      	ldr	r1, [pc, #96]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d105      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003688:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a12      	ldr	r2, [pc, #72]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036a0:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	490a      	ldr	r1, [pc, #40]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e049      	b.n	8003782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe f9d6 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 ff5e 	bl	80045dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d001      	beq.n	80037a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e04c      	b.n	800383e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a26      	ldr	r2, [pc, #152]	@ (800384c <HAL_TIM_Base_Start+0xc0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d022      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037be:	d01d      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <HAL_TIM_Base_Start+0xc4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d018      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a21      	ldr	r2, [pc, #132]	@ (8003854 <HAL_TIM_Base_Start+0xc8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003858 <HAL_TIM_Base_Start+0xcc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1e      	ldr	r2, [pc, #120]	@ (800385c <HAL_TIM_Base_Start+0xd0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003860 <HAL_TIM_Base_Start+0xd4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_Base_Start+0x70>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <HAL_TIM_Base_Start+0xd8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d115      	bne.n	8003828 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_TIM_Base_Start+0xdc>)
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d015      	beq.n	800383a <HAL_TIM_Base_Start+0xae>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003814:	d011      	beq.n	800383a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	e008      	b.n	800383a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e000      	b.n	800383c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	40015000 	.word	0x40015000
 8003868:	00010007 	.word	0x00010007

0800386c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e054      	b.n	800392e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a26      	ldr	r2, [pc, #152]	@ (800393c <HAL_TIM_Base_Start_IT+0xd0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d022      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ae:	d01d      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a22      	ldr	r2, [pc, #136]	@ (8003940 <HAL_TIM_Base_Start_IT+0xd4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d018      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <HAL_TIM_Base_Start_IT+0xd8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003948 <HAL_TIM_Base_Start_IT+0xdc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00e      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <HAL_TIM_Base_Start_IT+0xe0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003950 <HAL_TIM_Base_Start_IT+0xe4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x80>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <HAL_TIM_Base_Start_IT+0xe8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d115      	bne.n	8003918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <HAL_TIM_Base_Start_IT+0xec>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d015      	beq.n	800392a <HAL_TIM_Base_Start_IT+0xbe>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003904:	d011      	beq.n	800392a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	e008      	b.n	800392a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e000      	b.n	800392c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40013400 	.word	0x40013400
 8003950:	40014000 	.word	0x40014000
 8003954:	40015000 	.word	0x40015000
 8003958:	00010007 	.word	0x00010007

0800395c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e049      	b.n	8003a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe f876 	bl	8001a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fe1e 	bl	80045dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_TIM_PWM_Start+0x24>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e03c      	b.n	8003aaa <HAL_TIM_PWM_Start+0x9e>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d109      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x3e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e02f      	b.n	8003aaa <HAL_TIM_PWM_Start+0x9e>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d109      	bne.n	8003a64 <HAL_TIM_PWM_Start+0x58>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e022      	b.n	8003aaa <HAL_TIM_PWM_Start+0x9e>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d109      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x72>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e015      	b.n	8003aaa <HAL_TIM_PWM_Start+0x9e>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start+0x8c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e008      	b.n	8003aaa <HAL_TIM_PWM_Start+0x9e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0a6      	b.n	8003c00 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0xb6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac0:	e023      	b.n	8003b0a <HAL_TIM_PWM_Start+0xfe>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0xc6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad0:	e01b      	b.n	8003b0a <HAL_TIM_PWM_Start+0xfe>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0xd6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae0:	e013      	b.n	8003b0a <HAL_TIM_PWM_Start+0xfe>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIM_PWM_Start+0xe6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003af0:	e00b      	b.n	8003b0a <HAL_TIM_PWM_Start+0xfe>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d104      	bne.n	8003b02 <HAL_TIM_PWM_Start+0xf6>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b00:	e003      	b.n	8003b0a <HAL_TIM_PWM_Start+0xfe>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f9dc 	bl	8004ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c08 <HAL_TIM_PWM_Start+0x1fc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_TIM_PWM_Start+0x148>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a39      	ldr	r2, [pc, #228]	@ (8003c0c <HAL_TIM_PWM_Start+0x200>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_TIM_PWM_Start+0x148>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a37      	ldr	r2, [pc, #220]	@ (8003c10 <HAL_TIM_PWM_Start+0x204>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_TIM_PWM_Start+0x148>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a36      	ldr	r2, [pc, #216]	@ (8003c14 <HAL_TIM_PWM_Start+0x208>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_TIM_PWM_Start+0x148>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a34      	ldr	r2, [pc, #208]	@ (8003c18 <HAL_TIM_PWM_Start+0x20c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_TIM_PWM_Start+0x148>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a33      	ldr	r2, [pc, #204]	@ (8003c1c <HAL_TIM_PWM_Start+0x210>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_PWM_Start+0x14c>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_TIM_PWM_Start+0x14e>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <HAL_TIM_PWM_Start+0x1fc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d01d      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a26      	ldr	r2, [pc, #152]	@ (8003c20 <HAL_TIM_PWM_Start+0x214>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a24      	ldr	r2, [pc, #144]	@ (8003c24 <HAL_TIM_PWM_Start+0x218>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a23      	ldr	r2, [pc, #140]	@ (8003c28 <HAL_TIM_PWM_Start+0x21c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	@ (8003c0c <HAL_TIM_PWM_Start+0x200>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <HAL_TIM_PWM_Start+0x204>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x1b2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <HAL_TIM_PWM_Start+0x210>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d115      	bne.n	8003bea <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_TIM_PWM_Start+0x220>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d015      	beq.n	8003bfc <HAL_TIM_PWM_Start+0x1f0>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd6:	d011      	beq.n	8003bfc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be8:	e008      	b.n	8003bfc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e000      	b.n	8003bfe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40015000 	.word	0x40015000
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	00010007 	.word	0x00010007

08003c30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e097      	b.n	8003d74 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fd ff63 	bl	8001b24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003c74:	f023 0307 	bic.w	r3, r3, #7
 8003c78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f000 fca9 	bl	80045dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003cd0:	f023 030c 	bic.w	r3, r3, #12
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	4313      	orrs	r3, r2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	011a      	lsls	r2, r3, #4
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	031b      	lsls	r3, r3, #12
 8003d00:	4313      	orrs	r3, r2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	4313      	orrs	r3, r2
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003da4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d110      	bne.n	8003dce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003db2:	7b7b      	ldrb	r3, [r7, #13]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d001      	beq.n	8003dbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e069      	b.n	8003e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dcc:	e031      	b.n	8003e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d110      	bne.n	8003df6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd4:	7bbb      	ldrb	r3, [r7, #14]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dda:	7b3b      	ldrb	r3, [r7, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e055      	b.n	8003e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003df4:	e01d      	b.n	8003e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d108      	bne.n	8003e0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dfc:	7bbb      	ldrb	r3, [r7, #14]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d105      	bne.n	8003e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e02:	7b7b      	ldrb	r3, [r7, #13]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e08:	7b3b      	ldrb	r3, [r7, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e03e      	b.n	8003e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_TIM_Encoder_Start+0xc4>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d008      	beq.n	8003e50 <HAL_TIM_Encoder_Start+0xd4>
 8003e3e:	e00f      	b.n	8003e60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f841 	bl	8004ed0 <TIM_CCxChannelCmd>
      break;
 8003e4e:	e016      	b.n	8003e7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	2104      	movs	r1, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 f839 	bl	8004ed0 <TIM_CCxChannelCmd>
      break;
 8003e5e:	e00e      	b.n	8003e7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 f831 	bl	8004ed0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2201      	movs	r2, #1
 8003e74:	2104      	movs	r1, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f82a 	bl	8004ed0 <TIM_CCxChannelCmd>
      break;
 8003e7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0202 	mvn.w	r2, #2
 8003ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fb5c 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb4e 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb5f 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d020      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0204 	mvn.w	r2, #4
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fb36 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb28 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fb39 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0208 	mvn.w	r2, #8
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fb10 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fb02 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb13 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 faea 	bl	80045a0 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fadc 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 faed 	bl	80045b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0201 	mvn.w	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fa90 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800402a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f001 f8a9 	bl	8005184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800404e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 f8a1 	bl	8005198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 faa7 	bl	80045c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0220 	mvn.w	r2, #32
 8004096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f001 f869 	bl	8005170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f001 f875 	bl	80051ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00c      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f001 f86d 	bl	80051c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f001 f865 	bl	80051d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00c      	beq.n	800412e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f001 f85d 	bl	80051e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004152:	2302      	movs	r3, #2
 8004154:	e0ff      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b14      	cmp	r3, #20
 8004162:	f200 80f0 	bhi.w	8004346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041c1 	.word	0x080041c1
 8004170:	08004347 	.word	0x08004347
 8004174:	08004347 	.word	0x08004347
 8004178:	08004347 	.word	0x08004347
 800417c:	08004201 	.word	0x08004201
 8004180:	08004347 	.word	0x08004347
 8004184:	08004347 	.word	0x08004347
 8004188:	08004347 	.word	0x08004347
 800418c:	08004243 	.word	0x08004243
 8004190:	08004347 	.word	0x08004347
 8004194:	08004347 	.word	0x08004347
 8004198:	08004347 	.word	0x08004347
 800419c:	08004283 	.word	0x08004283
 80041a0:	08004347 	.word	0x08004347
 80041a4:	08004347 	.word	0x08004347
 80041a8:	08004347 	.word	0x08004347
 80041ac:	080042c5 	.word	0x080042c5
 80041b0:	08004347 	.word	0x08004347
 80041b4:	08004347 	.word	0x08004347
 80041b8:	08004347 	.word	0x08004347
 80041bc:	08004305 	.word	0x08004305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fabc 	bl	8004744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0208 	orr.w	r2, r2, #8
 80041da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0204 	bic.w	r2, r2, #4
 80041ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6999      	ldr	r1, [r3, #24]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	619a      	str	r2, [r3, #24]
      break;
 80041fe:	e0a5      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fb36 	bl	8004878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800421a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6999      	ldr	r1, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	021a      	lsls	r2, r3, #8
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	619a      	str	r2, [r3, #24]
      break;
 8004240:	e084      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fba9 	bl	80049a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0208 	orr.w	r2, r2, #8
 800425c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0204 	bic.w	r2, r2, #4
 800426c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69d9      	ldr	r1, [r3, #28]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	61da      	str	r2, [r3, #28]
      break;
 8004280:	e064      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fc1b 	bl	8004ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800429c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69d9      	ldr	r1, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	021a      	lsls	r2, r3, #8
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	61da      	str	r2, [r3, #28]
      break;
 80042c2:	e043      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fc8e 	bl	8004bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0208 	orr.w	r2, r2, #8
 80042de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004302:	e023      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fcd8 	bl	8004cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800431e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800432e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004344:	e002      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
      break;
 800434a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop

08004360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIM_ConfigClockSource+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e0f6      	b.n	800456a <HAL_TIM_ConfigClockSource+0x20a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800439a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800439e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6f      	ldr	r2, [pc, #444]	@ (8004574 <HAL_TIM_ConfigClockSource+0x214>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f000 80c1 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 80043bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004574 <HAL_TIM_ConfigClockSource+0x214>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f200 80c6 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 80043c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004578 <HAL_TIM_ConfigClockSource+0x218>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f000 80b9 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 80043cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004578 <HAL_TIM_ConfigClockSource+0x218>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f200 80be 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 80043d4:	4a69      	ldr	r2, [pc, #420]	@ (800457c <HAL_TIM_ConfigClockSource+0x21c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f000 80b1 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 80043dc:	4a67      	ldr	r2, [pc, #412]	@ (800457c <HAL_TIM_ConfigClockSource+0x21c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f200 80b6 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 80043e4:	4a66      	ldr	r2, [pc, #408]	@ (8004580 <HAL_TIM_ConfigClockSource+0x220>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f000 80a9 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 80043ec:	4a64      	ldr	r2, [pc, #400]	@ (8004580 <HAL_TIM_ConfigClockSource+0x220>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f200 80ae 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 80043f4:	4a63      	ldr	r2, [pc, #396]	@ (8004584 <HAL_TIM_ConfigClockSource+0x224>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f000 80a1 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 80043fc:	4a61      	ldr	r2, [pc, #388]	@ (8004584 <HAL_TIM_ConfigClockSource+0x224>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f200 80a6 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004404:	4a60      	ldr	r2, [pc, #384]	@ (8004588 <HAL_TIM_ConfigClockSource+0x228>)
 8004406:	4293      	cmp	r3, r2
 8004408:	f000 8099 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 800440c:	4a5e      	ldr	r2, [pc, #376]	@ (8004588 <HAL_TIM_ConfigClockSource+0x228>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f200 809e 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004414:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004418:	f000 8091 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 800441c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004420:	f200 8096 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004428:	f000 8089 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1de>
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004430:	f200 808e 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004438:	d03e      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x158>
 800443a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443e:	f200 8087 	bhi.w	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004446:	f000 8086 	beq.w	8004556 <HAL_TIM_ConfigClockSource+0x1f6>
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800444e:	d87f      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004450:	2b70      	cmp	r3, #112	@ 0x70
 8004452:	d01a      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x12a>
 8004454:	2b70      	cmp	r3, #112	@ 0x70
 8004456:	d87b      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004458:	2b60      	cmp	r3, #96	@ 0x60
 800445a:	d050      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x19e>
 800445c:	2b60      	cmp	r3, #96	@ 0x60
 800445e:	d877      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004460:	2b50      	cmp	r3, #80	@ 0x50
 8004462:	d03c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x17e>
 8004464:	2b50      	cmp	r3, #80	@ 0x50
 8004466:	d873      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004468:	2b40      	cmp	r3, #64	@ 0x40
 800446a:	d058      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x1be>
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d86f      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004470:	2b30      	cmp	r3, #48	@ 0x30
 8004472:	d064      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x1de>
 8004474:	2b30      	cmp	r3, #48	@ 0x30
 8004476:	d86b      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004478:	2b20      	cmp	r3, #32
 800447a:	d060      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x1de>
 800447c:	2b20      	cmp	r3, #32
 800447e:	d867      	bhi.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05c      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x1de>
 8004484:	2b10      	cmp	r3, #16
 8004486:	d05a      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x1de>
 8004488:	e062      	b.n	8004550 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800449a:	f000 fcf9 	bl	8004e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	609a      	str	r2, [r3, #8]
      break;
 80044b6:	e04f      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044c8:	f000 fce2 	bl	8004e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044da:	609a      	str	r2, [r3, #8]
      break;
 80044dc:	e03c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 fc54 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2150      	movs	r1, #80	@ 0x50
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fcad 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 80044fc:	e02c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800450a:	461a      	mov	r2, r3
 800450c:	f000 fc73 	bl	8004df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2160      	movs	r1, #96	@ 0x60
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fc9d 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 800451c:	e01c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	461a      	mov	r2, r3
 800452c:	f000 fc34 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2140      	movs	r1, #64	@ 0x40
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fc8d 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 800453c:	e00c      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f000 fc84 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 800454e:	e003      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      break;
 8004554:	e000      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	00100070 	.word	0x00100070
 8004578:	00100060 	.word	0x00100060
 800457c:	00100050 	.word	0x00100050
 8004580:	00100040 	.word	0x00100040
 8004584:	00100030 	.word	0x00100030
 8004588:	00100020 	.word	0x00100020

0800458c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004720 <TIM_Base_SetConfig+0x144>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d017      	beq.n	8004624 <TIM_Base_SetConfig+0x48>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fa:	d013      	beq.n	8004624 <TIM_Base_SetConfig+0x48>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a49      	ldr	r2, [pc, #292]	@ (8004724 <TIM_Base_SetConfig+0x148>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0x48>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a48      	ldr	r2, [pc, #288]	@ (8004728 <TIM_Base_SetConfig+0x14c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0x48>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a47      	ldr	r2, [pc, #284]	@ (800472c <TIM_Base_SetConfig+0x150>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0x48>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a46      	ldr	r2, [pc, #280]	@ (8004730 <TIM_Base_SetConfig+0x154>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0x48>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a45      	ldr	r2, [pc, #276]	@ (8004734 <TIM_Base_SetConfig+0x158>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a39      	ldr	r2, [pc, #228]	@ (8004720 <TIM_Base_SetConfig+0x144>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d023      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d01f      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a36      	ldr	r2, [pc, #216]	@ (8004724 <TIM_Base_SetConfig+0x148>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01b      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a35      	ldr	r2, [pc, #212]	@ (8004728 <TIM_Base_SetConfig+0x14c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d017      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a34      	ldr	r2, [pc, #208]	@ (800472c <TIM_Base_SetConfig+0x150>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a33      	ldr	r2, [pc, #204]	@ (8004730 <TIM_Base_SetConfig+0x154>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a33      	ldr	r2, [pc, #204]	@ (8004738 <TIM_Base_SetConfig+0x15c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a32      	ldr	r2, [pc, #200]	@ (800473c <TIM_Base_SetConfig+0x160>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a31      	ldr	r2, [pc, #196]	@ (8004740 <TIM_Base_SetConfig+0x164>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0xaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2c      	ldr	r2, [pc, #176]	@ (8004734 <TIM_Base_SetConfig+0x158>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a18      	ldr	r2, [pc, #96]	@ (8004720 <TIM_Base_SetConfig+0x144>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <TIM_Base_SetConfig+0x110>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004730 <TIM_Base_SetConfig+0x154>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00f      	beq.n	80046ec <TIM_Base_SetConfig+0x110>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004738 <TIM_Base_SetConfig+0x15c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_Base_SetConfig+0x110>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a19      	ldr	r2, [pc, #100]	@ (800473c <TIM_Base_SetConfig+0x160>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x110>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <TIM_Base_SetConfig+0x164>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x110>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a13      	ldr	r2, [pc, #76]	@ (8004734 <TIM_Base_SetConfig+0x158>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d103      	bne.n	80046f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	611a      	str	r2, [r3, #16]
  }
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40015000 	.word	0x40015000
 8004738:	40014000 	.word	0x40014000
 800473c:	40014400 	.word	0x40014400
 8004740:	40014800 	.word	0x40014800

08004744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f023 0201 	bic.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0302 	bic.w	r3, r3, #2
 8004790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a30      	ldr	r2, [pc, #192]	@ (8004860 <TIM_OC1_SetConfig+0x11c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <TIM_OC1_SetConfig+0x88>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004864 <TIM_OC1_SetConfig+0x120>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00f      	beq.n	80047cc <TIM_OC1_SetConfig+0x88>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004868 <TIM_OC1_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC1_SetConfig+0x88>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a2d      	ldr	r2, [pc, #180]	@ (800486c <TIM_OC1_SetConfig+0x128>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC1_SetConfig+0x88>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a2c      	ldr	r2, [pc, #176]	@ (8004870 <TIM_OC1_SetConfig+0x12c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC1_SetConfig+0x88>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004874 <TIM_OC1_SetConfig+0x130>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10c      	bne.n	80047e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0308 	bic.w	r3, r3, #8
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 0304 	bic.w	r3, r3, #4
 80047e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <TIM_OC1_SetConfig+0x11c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <TIM_OC1_SetConfig+0xd2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004864 <TIM_OC1_SetConfig+0x120>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_OC1_SetConfig+0xd2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004868 <TIM_OC1_SetConfig+0x124>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_OC1_SetConfig+0xd2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1a      	ldr	r2, [pc, #104]	@ (800486c <TIM_OC1_SetConfig+0x128>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_OC1_SetConfig+0xd2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a19      	ldr	r2, [pc, #100]	@ (8004870 <TIM_OC1_SetConfig+0x12c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_OC1_SetConfig+0xd2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <TIM_OC1_SetConfig+0x130>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d111      	bne.n	800483a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800481c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	621a      	str	r2, [r3, #32]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40013400 	.word	0x40013400
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800
 8004874:	40015000 	.word	0x40015000

08004878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 0210 	bic.w	r2, r3, #16
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0320 	bic.w	r3, r3, #32
 80048c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004988 <TIM_OC2_SetConfig+0x110>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_OC2_SetConfig+0x74>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a2b      	ldr	r2, [pc, #172]	@ (800498c <TIM_OC2_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC2_SetConfig+0x74>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004990 <TIM_OC2_SetConfig+0x118>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10d      	bne.n	8004908 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <TIM_OC2_SetConfig+0x110>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_OC2_SetConfig+0xc0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <TIM_OC2_SetConfig+0x114>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00f      	beq.n	8004938 <TIM_OC2_SetConfig+0xc0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1e      	ldr	r2, [pc, #120]	@ (8004994 <TIM_OC2_SetConfig+0x11c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_OC2_SetConfig+0xc0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <TIM_OC2_SetConfig+0x120>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_OC2_SetConfig+0xc0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <TIM_OC2_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC2_SetConfig+0xc0>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a17      	ldr	r2, [pc, #92]	@ (8004990 <TIM_OC2_SetConfig+0x118>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d113      	bne.n	8004960 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800493e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40015000 	.word	0x40015000
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800

080049a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2b      	ldr	r2, [pc, #172]	@ (8004aac <TIM_OC3_SetConfig+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_OC3_SetConfig+0x72>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2a      	ldr	r2, [pc, #168]	@ (8004ab0 <TIM_OC3_SetConfig+0x110>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC3_SetConfig+0x72>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a29      	ldr	r2, [pc, #164]	@ (8004ab4 <TIM_OC3_SetConfig+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10d      	bne.n	8004a2e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <TIM_OC3_SetConfig+0x10c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <TIM_OC3_SetConfig+0xbe>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab0 <TIM_OC3_SetConfig+0x110>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00f      	beq.n	8004a5e <TIM_OC3_SetConfig+0xbe>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <TIM_OC3_SetConfig+0x118>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <TIM_OC3_SetConfig+0xbe>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1c      	ldr	r2, [pc, #112]	@ (8004abc <TIM_OC3_SetConfig+0x11c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <TIM_OC3_SetConfig+0xbe>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <TIM_OC3_SetConfig+0x120>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_OC3_SetConfig+0xbe>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a16      	ldr	r2, [pc, #88]	@ (8004ab4 <TIM_OC3_SetConfig+0x114>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d113      	bne.n	8004a86 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40013400 	.word	0x40013400
 8004ab4:	40015000 	.word	0x40015000
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	031b      	lsls	r3, r3, #12
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd4 <TIM_OC4_SetConfig+0x110>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_OC4_SetConfig+0x74>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd8 <TIM_OC4_SetConfig+0x114>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC4_SetConfig+0x74>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a2a      	ldr	r2, [pc, #168]	@ (8004bdc <TIM_OC4_SetConfig+0x118>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10d      	bne.n	8004b54 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd4 <TIM_OC4_SetConfig+0x110>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <TIM_OC4_SetConfig+0xc0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd8 <TIM_OC4_SetConfig+0x114>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_OC4_SetConfig+0xc0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1e      	ldr	r2, [pc, #120]	@ (8004be0 <TIM_OC4_SetConfig+0x11c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_OC4_SetConfig+0xc0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <TIM_OC4_SetConfig+0x120>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_OC4_SetConfig+0xc0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a1c      	ldr	r2, [pc, #112]	@ (8004be8 <TIM_OC4_SetConfig+0x124>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC4_SetConfig+0xc0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <TIM_OC4_SetConfig+0x118>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d113      	bne.n	8004bac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	019b      	lsls	r3, r3, #6
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40013400 	.word	0x40013400
 8004bdc:	40015000 	.word	0x40015000
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40014400 	.word	0x40014400
 8004be8:	40014800 	.word	0x40014800

08004bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a19      	ldr	r2, [pc, #100]	@ (8004ca8 <TIM_OC5_SetConfig+0xbc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <TIM_OC5_SetConfig+0x82>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a18      	ldr	r2, [pc, #96]	@ (8004cac <TIM_OC5_SetConfig+0xc0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00f      	beq.n	8004c6e <TIM_OC5_SetConfig+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <TIM_OC5_SetConfig+0xc4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <TIM_OC5_SetConfig+0x82>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <TIM_OC5_SetConfig+0xc8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <TIM_OC5_SetConfig+0x82>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <TIM_OC5_SetConfig+0xcc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC5_SetConfig+0x82>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <TIM_OC5_SetConfig+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d109      	bne.n	8004c82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40013400 	.word	0x40013400
 8004cb0:	40014000 	.word	0x40014000
 8004cb4:	40014400 	.word	0x40014400
 8004cb8:	40014800 	.word	0x40014800
 8004cbc:	40015000 	.word	0x40015000

08004cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	051b      	lsls	r3, r3, #20
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1a      	ldr	r2, [pc, #104]	@ (8004d80 <TIM_OC6_SetConfig+0xc0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <TIM_OC6_SetConfig+0x84>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a19      	ldr	r2, [pc, #100]	@ (8004d84 <TIM_OC6_SetConfig+0xc4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <TIM_OC6_SetConfig+0x84>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <TIM_OC6_SetConfig+0xc8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <TIM_OC6_SetConfig+0x84>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <TIM_OC6_SetConfig+0xcc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_OC6_SetConfig+0x84>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a16      	ldr	r2, [pc, #88]	@ (8004d90 <TIM_OC6_SetConfig+0xd0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_OC6_SetConfig+0x84>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <TIM_OC6_SetConfig+0xd4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d109      	bne.n	8004d58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	029b      	lsls	r3, r3, #10
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40015000 	.word	0x40015000

08004d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 0210 	bic.w	r2, r3, #16
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	031b      	lsls	r3, r3, #12
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f043 0307 	orr.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e074      	b.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a34      	ldr	r2, [pc, #208]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a33      	ldr	r2, [pc, #204]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a31      	ldr	r2, [pc, #196]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a21      	ldr	r2, [pc, #132]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb4:	d01d      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1f      	ldr	r2, [pc, #124]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10c      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4313      	orrs	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40015000 	.word	0x40015000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000

08005048 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005060:	2302      	movs	r3, #2
 8005062:	e078      	b.n	8005156 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005164 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a19      	ldr	r2, [pc, #100]	@ (800516c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d11c      	bne.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	051b      	lsls	r3, r3, #20
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40015000 	.word	0x40015000

08005170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e042      	b.n	8005294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc fbcf 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2224      	movs	r2, #36	@ 0x24
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fb24 	bl	8005894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f825 	bl	800529c <UART_SetConfig>
 8005252:	4603      	mov	r3, r0
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e01b      	b.n	8005294 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800526a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800527a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fba3 	bl	80059d8 <UART_CheckIdleState>
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b08c      	sub	sp, #48	@ 0x30
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4baa      	ldr	r3, [pc, #680]	@ (8005574 <UART_SetConfig+0x2d8>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a9f      	ldr	r2, [pc, #636]	@ (8005578 <UART_SetConfig+0x2dc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005304:	4313      	orrs	r3, r2
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005312:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800531c:	430b      	orrs	r3, r1
 800531e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	f023 010f 	bic.w	r1, r3, #15
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a90      	ldr	r2, [pc, #576]	@ (800557c <UART_SetConfig+0x2e0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d125      	bne.n	800538c <UART_SetConfig+0xf0>
 8005340:	4b8f      	ldr	r3, [pc, #572]	@ (8005580 <UART_SetConfig+0x2e4>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b03      	cmp	r3, #3
 800534c:	d81a      	bhi.n	8005384 <UART_SetConfig+0xe8>
 800534e:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0xb8>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005365 	.word	0x08005365
 8005358:	08005375 	.word	0x08005375
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800537d 	.word	0x0800537d
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e116      	b.n	800559a <UART_SetConfig+0x2fe>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e112      	b.n	800559a <UART_SetConfig+0x2fe>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e10e      	b.n	800559a <UART_SetConfig+0x2fe>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e10a      	b.n	800559a <UART_SetConfig+0x2fe>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e106      	b.n	800559a <UART_SetConfig+0x2fe>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a7c      	ldr	r2, [pc, #496]	@ (8005584 <UART_SetConfig+0x2e8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d138      	bne.n	8005408 <UART_SetConfig+0x16c>
 8005396:	4b7a      	ldr	r3, [pc, #488]	@ (8005580 <UART_SetConfig+0x2e4>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d82d      	bhi.n	8005400 <UART_SetConfig+0x164>
 80053a4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x110>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053e1 	.word	0x080053e1
 80053b0:	08005401 	.word	0x08005401
 80053b4:	08005401 	.word	0x08005401
 80053b8:	08005401 	.word	0x08005401
 80053bc:	080053f1 	.word	0x080053f1
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	08005401 	.word	0x08005401
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	08005401 	.word	0x08005401
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005401 	.word	0x08005401
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e0d8      	b.n	800559a <UART_SetConfig+0x2fe>
 80053e8:	2302      	movs	r3, #2
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ee:	e0d4      	b.n	800559a <UART_SetConfig+0x2fe>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	e0d0      	b.n	800559a <UART_SetConfig+0x2fe>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e0cc      	b.n	800559a <UART_SetConfig+0x2fe>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005406:	e0c8      	b.n	800559a <UART_SetConfig+0x2fe>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5e      	ldr	r2, [pc, #376]	@ (8005588 <UART_SetConfig+0x2ec>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d125      	bne.n	800545e <UART_SetConfig+0x1c2>
 8005412:	4b5b      	ldr	r3, [pc, #364]	@ (8005580 <UART_SetConfig+0x2e4>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800541c:	2b30      	cmp	r3, #48	@ 0x30
 800541e:	d016      	beq.n	800544e <UART_SetConfig+0x1b2>
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d818      	bhi.n	8005456 <UART_SetConfig+0x1ba>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d00a      	beq.n	800543e <UART_SetConfig+0x1a2>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d814      	bhi.n	8005456 <UART_SetConfig+0x1ba>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <UART_SetConfig+0x19a>
 8005430:	2b10      	cmp	r3, #16
 8005432:	d008      	beq.n	8005446 <UART_SetConfig+0x1aa>
 8005434:	e00f      	b.n	8005456 <UART_SetConfig+0x1ba>
 8005436:	2300      	movs	r3, #0
 8005438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543c:	e0ad      	b.n	800559a <UART_SetConfig+0x2fe>
 800543e:	2302      	movs	r3, #2
 8005440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005444:	e0a9      	b.n	800559a <UART_SetConfig+0x2fe>
 8005446:	2304      	movs	r3, #4
 8005448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544c:	e0a5      	b.n	800559a <UART_SetConfig+0x2fe>
 800544e:	2308      	movs	r3, #8
 8005450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005454:	e0a1      	b.n	800559a <UART_SetConfig+0x2fe>
 8005456:	2310      	movs	r3, #16
 8005458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545c:	e09d      	b.n	800559a <UART_SetConfig+0x2fe>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a4a      	ldr	r2, [pc, #296]	@ (800558c <UART_SetConfig+0x2f0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d125      	bne.n	80054b4 <UART_SetConfig+0x218>
 8005468:	4b45      	ldr	r3, [pc, #276]	@ (8005580 <UART_SetConfig+0x2e4>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005472:	2bc0      	cmp	r3, #192	@ 0xc0
 8005474:	d016      	beq.n	80054a4 <UART_SetConfig+0x208>
 8005476:	2bc0      	cmp	r3, #192	@ 0xc0
 8005478:	d818      	bhi.n	80054ac <UART_SetConfig+0x210>
 800547a:	2b80      	cmp	r3, #128	@ 0x80
 800547c:	d00a      	beq.n	8005494 <UART_SetConfig+0x1f8>
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d814      	bhi.n	80054ac <UART_SetConfig+0x210>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <UART_SetConfig+0x1f0>
 8005486:	2b40      	cmp	r3, #64	@ 0x40
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x200>
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x210>
 800548c:	2300      	movs	r3, #0
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e082      	b.n	800559a <UART_SetConfig+0x2fe>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549a:	e07e      	b.n	800559a <UART_SetConfig+0x2fe>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e07a      	b.n	800559a <UART_SetConfig+0x2fe>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e076      	b.n	800559a <UART_SetConfig+0x2fe>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e072      	b.n	800559a <UART_SetConfig+0x2fe>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a35      	ldr	r2, [pc, #212]	@ (8005590 <UART_SetConfig+0x2f4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d12a      	bne.n	8005514 <UART_SetConfig+0x278>
 80054be:	4b30      	ldr	r3, [pc, #192]	@ (8005580 <UART_SetConfig+0x2e4>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054cc:	d01a      	beq.n	8005504 <UART_SetConfig+0x268>
 80054ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054d2:	d81b      	bhi.n	800550c <UART_SetConfig+0x270>
 80054d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054d8:	d00c      	beq.n	80054f4 <UART_SetConfig+0x258>
 80054da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054de:	d815      	bhi.n	800550c <UART_SetConfig+0x270>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <UART_SetConfig+0x250>
 80054e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e8:	d008      	beq.n	80054fc <UART_SetConfig+0x260>
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x270>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	e052      	b.n	800559a <UART_SetConfig+0x2fe>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fa:	e04e      	b.n	800559a <UART_SetConfig+0x2fe>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005502:	e04a      	b.n	800559a <UART_SetConfig+0x2fe>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550a:	e046      	b.n	800559a <UART_SetConfig+0x2fe>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005512:	e042      	b.n	800559a <UART_SetConfig+0x2fe>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <UART_SetConfig+0x2dc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d13a      	bne.n	8005594 <UART_SetConfig+0x2f8>
 800551e:	4b18      	ldr	r3, [pc, #96]	@ (8005580 <UART_SetConfig+0x2e4>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005528:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800552c:	d01a      	beq.n	8005564 <UART_SetConfig+0x2c8>
 800552e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005532:	d81b      	bhi.n	800556c <UART_SetConfig+0x2d0>
 8005534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005538:	d00c      	beq.n	8005554 <UART_SetConfig+0x2b8>
 800553a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800553e:	d815      	bhi.n	800556c <UART_SetConfig+0x2d0>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <UART_SetConfig+0x2b0>
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005548:	d008      	beq.n	800555c <UART_SetConfig+0x2c0>
 800554a:	e00f      	b.n	800556c <UART_SetConfig+0x2d0>
 800554c:	2300      	movs	r3, #0
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005552:	e022      	b.n	800559a <UART_SetConfig+0x2fe>
 8005554:	2302      	movs	r3, #2
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e01e      	b.n	800559a <UART_SetConfig+0x2fe>
 800555c:	2304      	movs	r3, #4
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e01a      	b.n	800559a <UART_SetConfig+0x2fe>
 8005564:	2308      	movs	r3, #8
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e016      	b.n	800559a <UART_SetConfig+0x2fe>
 800556c:	2310      	movs	r3, #16
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e012      	b.n	800559a <UART_SetConfig+0x2fe>
 8005574:	cfff69f3 	.word	0xcfff69f3
 8005578:	40008000 	.word	0x40008000
 800557c:	40013800 	.word	0x40013800
 8005580:	40021000 	.word	0x40021000
 8005584:	40004400 	.word	0x40004400
 8005588:	40004800 	.word	0x40004800
 800558c:	40004c00 	.word	0x40004c00
 8005590:	40005000 	.word	0x40005000
 8005594:	2310      	movs	r3, #16
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4aae      	ldr	r2, [pc, #696]	@ (8005858 <UART_SetConfig+0x5bc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	f040 8097 	bne.w	80056d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d823      	bhi.n	80055f6 <UART_SetConfig+0x35a>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <UART_SetConfig+0x318>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055f7 	.word	0x080055f7
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055f7 	.word	0x080055f7
 80055c4:	080055e7 	.word	0x080055e7
 80055c8:	080055f7 	.word	0x080055f7
 80055cc:	080055f7 	.word	0x080055f7
 80055d0:	080055f7 	.word	0x080055f7
 80055d4:	080055ef 	.word	0x080055ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d8:	f7fd fdc0 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 80055dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055de:	e010      	b.n	8005602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e0:	4b9e      	ldr	r3, [pc, #632]	@ (800585c <UART_SetConfig+0x5c0>)
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055e4:	e00d      	b.n	8005602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e6:	f7fd fd4b 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 80055ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ec:	e009      	b.n	8005602 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055f4:	e005      	b.n	8005602 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8130 	beq.w	800586a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	4a94      	ldr	r2, [pc, #592]	@ (8005860 <UART_SetConfig+0x5c4>)
 8005610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005614:	461a      	mov	r2, r3
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	fbb3 f3f2 	udiv	r3, r3, r2
 800561c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	429a      	cmp	r2, r3
 800562c:	d305      	bcc.n	800563a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	429a      	cmp	r2, r3
 8005638:	d903      	bls.n	8005642 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005640:	e113      	b.n	800586a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	2200      	movs	r2, #0
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	60fa      	str	r2, [r7, #12]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	4a84      	ldr	r2, [pc, #528]	@ (8005860 <UART_SetConfig+0x5c4>)
 8005650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005654:	b29b      	uxth	r3, r3
 8005656:	2200      	movs	r2, #0
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005664:	f7fb f9f6 	bl	8000a54 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4610      	mov	r0, r2
 800566e:	4619      	mov	r1, r3
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	020b      	lsls	r3, r1, #8
 800567a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800567e:	0202      	lsls	r2, r0, #8
 8005680:	6979      	ldr	r1, [r7, #20]
 8005682:	6849      	ldr	r1, [r1, #4]
 8005684:	0849      	lsrs	r1, r1, #1
 8005686:	2000      	movs	r0, #0
 8005688:	460c      	mov	r4, r1
 800568a:	4605      	mov	r5, r0
 800568c:	eb12 0804 	adds.w	r8, r2, r4
 8005690:	eb43 0905 	adc.w	r9, r3, r5
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	469a      	mov	sl, r3
 800569c:	4693      	mov	fp, r2
 800569e:	4652      	mov	r2, sl
 80056a0:	465b      	mov	r3, fp
 80056a2:	4640      	mov	r0, r8
 80056a4:	4649      	mov	r1, r9
 80056a6:	f7fb f9d5 	bl	8000a54 <__aeabi_uldivmod>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4613      	mov	r3, r2
 80056b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056b8:	d308      	bcc.n	80056cc <UART_SetConfig+0x430>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056c0:	d204      	bcs.n	80056cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a3a      	ldr	r2, [r7, #32]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	e0ce      	b.n	800586a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056d2:	e0ca      	b.n	800586a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056dc:	d166      	bne.n	80057ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80056de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d827      	bhi.n	8005736 <UART_SetConfig+0x49a>
 80056e6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <UART_SetConfig+0x450>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005727 	.word	0x08005727
 8005700:	08005737 	.word	0x08005737
 8005704:	08005737 	.word	0x08005737
 8005708:	08005737 	.word	0x08005737
 800570c:	0800572f 	.word	0x0800572f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fd fd24 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 8005714:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005716:	e014      	b.n	8005742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005718:	f7fd fd36 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 800571c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800571e:	e010      	b.n	8005742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005720:	4b4e      	ldr	r3, [pc, #312]	@ (800585c <UART_SetConfig+0x5c0>)
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005724:	e00d      	b.n	8005742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005726:	f7fd fcab 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800572a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800572c:	e009      	b.n	8005742 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005734:	e005      	b.n	8005742 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8090 	beq.w	800586a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	4a44      	ldr	r2, [pc, #272]	@ (8005860 <UART_SetConfig+0x5c4>)
 8005750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005754:	461a      	mov	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	fbb3 f3f2 	udiv	r3, r3, r2
 800575c:	005a      	lsls	r2, r3, #1
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	441a      	add	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d916      	bls.n	80057a4 <UART_SetConfig+0x508>
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577c:	d212      	bcs.n	80057a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f023 030f 	bic.w	r3, r3, #15
 8005786:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	b29a      	uxth	r2, r3
 8005794:	8bfb      	ldrh	r3, [r7, #30]
 8005796:	4313      	orrs	r3, r2
 8005798:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	8bfa      	ldrh	r2, [r7, #30]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	e062      	b.n	800586a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057aa:	e05e      	b.n	800586a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d828      	bhi.n	8005806 <UART_SetConfig+0x56a>
 80057b4:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <UART_SetConfig+0x520>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057e9 	.word	0x080057e9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	08005807 	.word	0x08005807
 80057cc:	080057f7 	.word	0x080057f7
 80057d0:	08005807 	.word	0x08005807
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005807 	.word	0x08005807
 80057dc:	080057ff 	.word	0x080057ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7fd fcbc 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 80057e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057e6:	e014      	b.n	8005812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7fd fcce 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 80057ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ee:	e010      	b.n	8005812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b1a      	ldr	r3, [pc, #104]	@ (800585c <UART_SetConfig+0x5c0>)
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057f4:	e00d      	b.n	8005812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7fd fc43 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 80057fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057fc:	e009      	b.n	8005812 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005804:	e005      	b.n	8005812 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005810:	bf00      	nop
    }

    if (pclk != 0U)
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d028      	beq.n	800586a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	4a10      	ldr	r2, [pc, #64]	@ (8005860 <UART_SetConfig+0x5c4>)
 800581e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005822:	461a      	mov	r2, r3
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	fbb3 f2f2 	udiv	r2, r3, r2
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	441a      	add	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	fbb2 f3f3 	udiv	r3, r2, r3
 800583a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b0f      	cmp	r3, #15
 8005840:	d910      	bls.n	8005864 <UART_SetConfig+0x5c8>
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005848:	d20c      	bcs.n	8005864 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	b29a      	uxth	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	e009      	b.n	800586a <UART_SetConfig+0x5ce>
 8005856:	bf00      	nop
 8005858:	40008000 	.word	0x40008000
 800585c:	00f42400 	.word	0x00f42400
 8005860:	08005fcc 	.word	0x08005fcc
      }
      else
      {
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2201      	movs	r2, #1
 800586e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2201      	movs	r2, #1
 8005876:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005886:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800588a:	4618      	mov	r0, r3
 800588c:	3730      	adds	r7, #48	@ 0x30
 800588e:	46bd      	mov	sp, r7
 8005890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01a      	beq.n	80059aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d10a      	bne.n	80059aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b098      	sub	sp, #96	@ 0x60
 80059dc:	af02      	add	r7, sp, #8
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e8:	f7fc fa0a 	bl	8001e00 <HAL_GetTick>
 80059ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d12f      	bne.n	8005a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a04:	2200      	movs	r2, #0
 8005a06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f88e 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d022      	beq.n	8005a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e063      	b.n	8005b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d149      	bne.n	8005afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a72:	2200      	movs	r2, #0
 8005a74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f857 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03c      	beq.n	8005afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	623b      	str	r3, [r7, #32]
   return(result);
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e6      	bne.n	8005a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3308      	adds	r3, #8
 8005abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	69b9      	ldr	r1, [r7, #24]
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e012      	b.n	8005b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3758      	adds	r7, #88	@ 0x58
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3c:	e04f      	b.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d04b      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fc f95b 	bl	8001e00 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e04e      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d037      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b80      	cmp	r3, #128	@ 0x80
 8005b72:	d034      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b40      	cmp	r3, #64	@ 0x40
 8005b78:	d031      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d110      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f838 	bl	8005c06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e029      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bb8:	d111      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f81e 	bl	8005c06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e00f      	b.n	8005bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d0a0      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b095      	sub	sp, #84	@ 0x54
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d118      	bne.n	8005cb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f023 0310 	bic.w	r3, r3, #16
 8005c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6979      	ldr	r1, [r7, #20]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	613b      	str	r3, [r7, #16]
   return(result);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e6      	bne.n	8005c80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005cc6:	bf00      	nop
 8005cc8:	3754      	adds	r7, #84	@ 0x54
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e027      	b.n	8005d38 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	@ 0x24
 8005cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e02d      	b.n	8005db8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2224      	movs	r2, #36	@ 0x24
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f84f 	bl	8005e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e02d      	b.n	8005e34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2224      	movs	r2, #36	@ 0x24
 8005de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f811 	bl	8005e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e5c:	e031      	b.n	8005ec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e5e:	2308      	movs	r3, #8
 8005e60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e62:	2308      	movs	r3, #8
 8005e64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	0e5b      	lsrs	r3, r3, #25
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	0f5b      	lsrs	r3, r3, #29
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	7b3a      	ldrb	r2, [r7, #12]
 8005e8a:	4911      	ldr	r1, [pc, #68]	@ (8005ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8005e8c:	5c8a      	ldrb	r2, [r1, r2]
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e92:	7b3a      	ldrb	r2, [r7, #12]
 8005e94:	490f      	ldr	r1, [pc, #60]	@ (8005ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8005e96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	7b7a      	ldrb	r2, [r7, #13]
 8005ea8:	4909      	ldr	r1, [pc, #36]	@ (8005ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8005eaa:	5c8a      	ldrb	r2, [r1, r2]
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005eb0:	7b7a      	ldrb	r2, [r7, #13]
 8005eb2:	4908      	ldr	r1, [pc, #32]	@ (8005ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8005eb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	08005fe4 	.word	0x08005fe4
 8005ed4:	08005fec 	.word	0x08005fec

08005ed8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	ed93 7a06 	vldr	s14, [r3, #24]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	edd3 7a07 	vldr	s15, [r3, #28]
 8005eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	edd3 7a08 	vldr	s15, [r3, #32]
 8005ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f08:	eeb1 7a67 	vneg.f32	s14, s15
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	330c      	adds	r3, #12
 8005f32:	220c      	movs	r2, #12
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f804 	bl	8005f44 <memset>
  }

}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <memset>:
 8005f44:	4402      	add	r2, r0
 8005f46:	4603      	mov	r3, r0
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <memset+0xa>
 8005f4c:	4770      	bx	lr
 8005f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f52:	e7f9      	b.n	8005f48 <memset+0x4>

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4d0d      	ldr	r5, [pc, #52]	@ (8005f8c <__libc_init_array+0x38>)
 8005f58:	4c0d      	ldr	r4, [pc, #52]	@ (8005f90 <__libc_init_array+0x3c>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	2600      	movs	r6, #0
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	4d0b      	ldr	r5, [pc, #44]	@ (8005f94 <__libc_init_array+0x40>)
 8005f66:	4c0c      	ldr	r4, [pc, #48]	@ (8005f98 <__libc_init_array+0x44>)
 8005f68:	f000 f818 	bl	8005f9c <_init>
 8005f6c:	1b64      	subs	r4, r4, r5
 8005f6e:	10a4      	asrs	r4, r4, #2
 8005f70:	2600      	movs	r6, #0
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	08005ffc 	.word	0x08005ffc
 8005f90:	08005ffc 	.word	0x08005ffc
 8005f94:	08005ffc 	.word	0x08005ffc
 8005f98:	08006000 	.word	0x08006000

08005f9c <_init>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr

08005fa8 <_fini>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr
